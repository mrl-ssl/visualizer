// source: WorldModel.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.BallObservationMeta', null, global);
goog.exportSymbol('proto.FieldConfig', null, global);
goog.exportSymbol('proto.Observation', null, global);
goog.exportSymbol('proto.ObservationMeta', null, global);
goog.exportSymbol('proto.ObservationModel', null, global);
goog.exportSymbol('proto.OccludeType', null, global);
goog.exportSymbol('proto.Packet', null, global);
goog.exportSymbol('proto.RobotCommands', null, global);
goog.exportSymbol('proto.RobotObservationMeta', null, global);
goog.exportSymbol('proto.SingleObjectState', null, global);
goog.exportSymbol('proto.SingleWirelessCommand', null, global);
goog.exportSymbol('proto.VectorF2D', null, global);
goog.exportSymbol('proto.WorldModel', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BallObservationMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BallObservationMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BallObservationMeta.displayName = 'proto.BallObservationMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RobotObservationMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RobotObservationMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RobotObservationMeta.displayName = 'proto.RobotObservationMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Observation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Observation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Observation.displayName = 'proto.Observation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ObservationMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ObservationMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ObservationMeta.displayName = 'proto.ObservationMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ObservationModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ObservationModel.repeatedFields_, null);
};
goog.inherits(proto.ObservationModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ObservationModel.displayName = 'proto.ObservationModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VectorF2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VectorF2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VectorF2D.displayName = 'proto.VectorF2D';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SingleObjectState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SingleObjectState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SingleObjectState.displayName = 'proto.SingleObjectState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SingleWirelessCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SingleWirelessCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SingleWirelessCommand.displayName = 'proto.SingleWirelessCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RobotCommands = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RobotCommands, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RobotCommands.displayName = 'proto.RobotCommands';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WorldModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WorldModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WorldModel.displayName = 'proto.WorldModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FieldConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FieldConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FieldConfig.displayName = 'proto.FieldConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Packet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Packet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Packet.displayName = 'proto.Packet';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BallObservationMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.BallObservationMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BallObservationMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BallObservationMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    occludingoffset: (f = msg.getOccludingoffset()) && proto.VectorF2D.toObject(includeInstance, f),
    occluded: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    occludingteam: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    occludingid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BallObservationMeta}
 */
proto.BallObservationMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BallObservationMeta;
  return proto.BallObservationMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BallObservationMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BallObservationMeta}
 */
proto.BallObservationMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOccludingoffset(value);
      break;
    case 2:
      var value = /** @type {!proto.OccludeType} */ (reader.readEnum());
      msg.setOccluded(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOccludingteam(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOccludingid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BallObservationMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BallObservationMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BallObservationMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BallObservationMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOccludingoffset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.OccludeType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional VectorF2D OccludingOffset = 1;
 * @return {?proto.VectorF2D}
 */
proto.BallObservationMeta.prototype.getOccludingoffset = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 1));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.BallObservationMeta} returns this
*/
proto.BallObservationMeta.prototype.setOccludingoffset = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BallObservationMeta} returns this
 */
proto.BallObservationMeta.prototype.clearOccludingoffset = function() {
  return this.setOccludingoffset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BallObservationMeta.prototype.hasOccludingoffset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required OccludeType Occluded = 2;
 * @return {!proto.OccludeType}
 */
proto.BallObservationMeta.prototype.getOccluded = function() {
  return /** @type {!proto.OccludeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.OccludeType} value
 * @return {!proto.BallObservationMeta} returns this
 */
proto.BallObservationMeta.prototype.setOccluded = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.BallObservationMeta} returns this
 */
proto.BallObservationMeta.prototype.clearOccluded = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BallObservationMeta.prototype.hasOccluded = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 OccludingTeam = 3;
 * @return {number}
 */
proto.BallObservationMeta.prototype.getOccludingteam = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.BallObservationMeta} returns this
 */
proto.BallObservationMeta.prototype.setOccludingteam = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.BallObservationMeta} returns this
 */
proto.BallObservationMeta.prototype.clearOccludingteam = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BallObservationMeta.prototype.hasOccludingteam = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 OccludingId = 4;
 * @return {number}
 */
proto.BallObservationMeta.prototype.getOccludingid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.BallObservationMeta} returns this
 */
proto.BallObservationMeta.prototype.setOccludingid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.BallObservationMeta} returns this
 */
proto.BallObservationMeta.prototype.clearOccludingid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BallObservationMeta.prototype.hasOccludingid = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RobotObservationMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.RobotObservationMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RobotObservationMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobotObservationMeta.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RobotObservationMeta}
 */
proto.RobotObservationMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RobotObservationMeta;
  return proto.RobotObservationMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RobotObservationMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RobotObservationMeta}
 */
proto.RobotObservationMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RobotObservationMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RobotObservationMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RobotObservationMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobotObservationMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Observation.prototype.toObject = function(opt_includeInstance) {
  return proto.Observation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Observation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Observation.toObject = function(includeInstance, msg) {
  var f, obj = {
    camera: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    confidence: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    location: (f = msg.getLocation()) && proto.VectorF2D.toObject(includeInstance, f),
    angle: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Observation}
 */
proto.Observation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Observation;
  return proto.Observation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Observation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Observation}
 */
proto.Observation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCamera(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 3:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Observation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Observation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Observation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Observation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * required uint32 Camera = 1;
 * @return {number}
 */
proto.Observation.prototype.getCamera = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Observation} returns this
 */
proto.Observation.prototype.setCamera = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Observation} returns this
 */
proto.Observation.prototype.clearCamera = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Observation.prototype.hasCamera = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float Confidence = 2;
 * @return {number}
 */
proto.Observation.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Observation} returns this
 */
proto.Observation.prototype.setConfidence = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Observation} returns this
 */
proto.Observation.prototype.clearConfidence = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Observation.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D Location = 3;
 * @return {?proto.VectorF2D}
 */
proto.Observation.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 3));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.Observation} returns this
*/
proto.Observation.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Observation} returns this
 */
proto.Observation.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Observation.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float Angle = 4;
 * @return {number}
 */
proto.Observation.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Observation} returns this
 */
proto.Observation.prototype.setAngle = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Observation} returns this
 */
proto.Observation.prototype.clearAngle = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Observation.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ObservationMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.ObservationMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ObservationMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ObservationMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    vision: (f = msg.getVision()) && proto.Observation.toObject(includeInstance, f),
    notseen: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    viewstate: (f = msg.getViewstate()) && proto.SingleObjectState.toObject(includeInstance, f),
    ballmeta: (f = msg.getBallmeta()) && proto.BallObservationMeta.toObject(includeInstance, f),
    robotmeta: (f = msg.getRobotmeta()) && proto.RobotObservationMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ObservationMeta}
 */
proto.ObservationMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ObservationMeta;
  return proto.ObservationMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ObservationMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ObservationMeta}
 */
proto.ObservationMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Observation;
      reader.readMessage(value,proto.Observation.deserializeBinaryFromReader);
      msg.setVision(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNotseen(value);
      break;
    case 3:
      var value = new proto.SingleObjectState;
      reader.readMessage(value,proto.SingleObjectState.deserializeBinaryFromReader);
      msg.setViewstate(value);
      break;
    case 4:
      var value = new proto.BallObservationMeta;
      reader.readMessage(value,proto.BallObservationMeta.deserializeBinaryFromReader);
      msg.setBallmeta(value);
      break;
    case 5:
      var value = new proto.RobotObservationMeta;
      reader.readMessage(value,proto.RobotObservationMeta.deserializeBinaryFromReader);
      msg.setRobotmeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ObservationMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ObservationMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ObservationMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ObservationMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVision();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Observation.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getViewstate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SingleObjectState.serializeBinaryToWriter
    );
  }
  f = message.getBallmeta();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.BallObservationMeta.serializeBinaryToWriter
    );
  }
  f = message.getRobotmeta();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.RobotObservationMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional Observation Vision = 1;
 * @return {?proto.Observation}
 */
proto.ObservationMeta.prototype.getVision = function() {
  return /** @type{?proto.Observation} */ (
    jspb.Message.getWrapperField(this, proto.Observation, 1));
};


/**
 * @param {?proto.Observation|undefined} value
 * @return {!proto.ObservationMeta} returns this
*/
proto.ObservationMeta.prototype.setVision = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ObservationMeta} returns this
 */
proto.ObservationMeta.prototype.clearVision = function() {
  return this.setVision(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ObservationMeta.prototype.hasVision = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 NotSeen = 2;
 * @return {number}
 */
proto.ObservationMeta.prototype.getNotseen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ObservationMeta} returns this
 */
proto.ObservationMeta.prototype.setNotseen = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ObservationMeta} returns this
 */
proto.ObservationMeta.prototype.clearNotseen = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ObservationMeta.prototype.hasNotseen = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SingleObjectState ViewState = 3;
 * @return {?proto.SingleObjectState}
 */
proto.ObservationMeta.prototype.getViewstate = function() {
  return /** @type{?proto.SingleObjectState} */ (
    jspb.Message.getWrapperField(this, proto.SingleObjectState, 3));
};


/**
 * @param {?proto.SingleObjectState|undefined} value
 * @return {!proto.ObservationMeta} returns this
*/
proto.ObservationMeta.prototype.setViewstate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ObservationMeta} returns this
 */
proto.ObservationMeta.prototype.clearViewstate = function() {
  return this.setViewstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ObservationMeta.prototype.hasViewstate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BallObservationMeta BallMeta = 4;
 * @return {?proto.BallObservationMeta}
 */
proto.ObservationMeta.prototype.getBallmeta = function() {
  return /** @type{?proto.BallObservationMeta} */ (
    jspb.Message.getWrapperField(this, proto.BallObservationMeta, 4));
};


/**
 * @param {?proto.BallObservationMeta|undefined} value
 * @return {!proto.ObservationMeta} returns this
*/
proto.ObservationMeta.prototype.setBallmeta = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ObservationMeta} returns this
 */
proto.ObservationMeta.prototype.clearBallmeta = function() {
  return this.setBallmeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ObservationMeta.prototype.hasBallmeta = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RobotObservationMeta RobotMeta = 5;
 * @return {?proto.RobotObservationMeta}
 */
proto.ObservationMeta.prototype.getRobotmeta = function() {
  return /** @type{?proto.RobotObservationMeta} */ (
    jspb.Message.getWrapperField(this, proto.RobotObservationMeta, 5));
};


/**
 * @param {?proto.RobotObservationMeta|undefined} value
 * @return {!proto.ObservationMeta} returns this
*/
proto.ObservationMeta.prototype.setRobotmeta = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ObservationMeta} returns this
 */
proto.ObservationMeta.prototype.clearRobotmeta = function() {
  return this.setRobotmeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ObservationMeta.prototype.hasRobotmeta = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ObservationModel.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ObservationModel.prototype.toObject = function(opt_includeInstance) {
  return proto.ObservationModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ObservationModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ObservationModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    ourrobotsMap: (f = msg.getOurrobotsMap()) ? f.toObject(includeInstance, proto.ObservationMeta.toObject) : [],
    opponentsMap: (f = msg.getOpponentsMap()) ? f.toObject(includeInstance, proto.ObservationMeta.toObject) : [],
    ball: (f = msg.getBall()) && proto.ObservationMeta.toObject(includeInstance, f),
    otherballsList: jspb.Message.toObjectList(msg.getOtherballsList(),
    proto.Observation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ObservationModel}
 */
proto.ObservationModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ObservationModel;
  return proto.ObservationModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ObservationModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ObservationModel}
 */
proto.ObservationModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getOurrobotsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.ObservationMeta.deserializeBinaryFromReader, 0, new proto.ObservationMeta());
         });
      break;
    case 2:
      var value = msg.getOpponentsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.ObservationMeta.deserializeBinaryFromReader, 0, new proto.ObservationMeta());
         });
      break;
    case 3:
      var value = new proto.ObservationMeta;
      reader.readMessage(value,proto.ObservationMeta.deserializeBinaryFromReader);
      msg.setBall(value);
      break;
    case 4:
      var value = new proto.Observation;
      reader.readMessage(value,proto.Observation.deserializeBinaryFromReader);
      msg.addOtherballs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ObservationModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ObservationModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ObservationModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ObservationModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOurrobotsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.ObservationMeta.serializeBinaryToWriter);
  }
  f = message.getOpponentsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.ObservationMeta.serializeBinaryToWriter);
  }
  f = message.getBall();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ObservationMeta.serializeBinaryToWriter
    );
  }
  f = message.getOtherballsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Observation.serializeBinaryToWriter
    );
  }
};


/**
 * map<int32, ObservationMeta> OurRobots = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ObservationMeta>}
 */
proto.ObservationModel.prototype.getOurrobotsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ObservationMeta>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.ObservationMeta));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ObservationModel} returns this
 */
proto.ObservationModel.prototype.clearOurrobotsMap = function() {
  this.getOurrobotsMap().clear();
  return this;};


/**
 * map<int32, ObservationMeta> Opponents = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.ObservationMeta>}
 */
proto.ObservationModel.prototype.getOpponentsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.ObservationMeta>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.ObservationMeta));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ObservationModel} returns this
 */
proto.ObservationModel.prototype.clearOpponentsMap = function() {
  this.getOpponentsMap().clear();
  return this;};


/**
 * optional ObservationMeta Ball = 3;
 * @return {?proto.ObservationMeta}
 */
proto.ObservationModel.prototype.getBall = function() {
  return /** @type{?proto.ObservationMeta} */ (
    jspb.Message.getWrapperField(this, proto.ObservationMeta, 3));
};


/**
 * @param {?proto.ObservationMeta|undefined} value
 * @return {!proto.ObservationModel} returns this
*/
proto.ObservationModel.prototype.setBall = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ObservationModel} returns this
 */
proto.ObservationModel.prototype.clearBall = function() {
  return this.setBall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ObservationModel.prototype.hasBall = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Observation OtherBalls = 4;
 * @return {!Array<!proto.Observation>}
 */
proto.ObservationModel.prototype.getOtherballsList = function() {
  return /** @type{!Array<!proto.Observation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Observation, 4));
};


/**
 * @param {!Array<!proto.Observation>} value
 * @return {!proto.ObservationModel} returns this
*/
proto.ObservationModel.prototype.setOtherballsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Observation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Observation}
 */
proto.ObservationModel.prototype.addOtherballs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Observation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ObservationModel} returns this
 */
proto.ObservationModel.prototype.clearOtherballsList = function() {
  return this.setOtherballsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VectorF2D.prototype.toObject = function(opt_includeInstance) {
  return proto.VectorF2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VectorF2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VectorF2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VectorF2D}
 */
proto.VectorF2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VectorF2D;
  return proto.VectorF2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VectorF2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VectorF2D}
 */
proto.VectorF2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VectorF2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VectorF2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VectorF2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VectorF2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * required float X = 1;
 * @return {number}
 */
proto.VectorF2D.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VectorF2D} returns this
 */
proto.VectorF2D.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.VectorF2D} returns this
 */
proto.VectorF2D.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VectorF2D.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float Y = 2;
 * @return {number}
 */
proto.VectorF2D.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VectorF2D} returns this
 */
proto.VectorF2D.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.VectorF2D} returns this
 */
proto.VectorF2D.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VectorF2D.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SingleObjectState.prototype.toObject = function(opt_includeInstance) {
  return proto.SingleObjectState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SingleObjectState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SingleObjectState.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.VectorF2D.toObject(includeInstance, f),
    speed: (f = msg.getSpeed()) && proto.VectorF2D.toObject(includeInstance, f),
    angle: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    angularspeed: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    stuck: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SingleObjectState}
 */
proto.SingleObjectState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SingleObjectState;
  return proto.SingleObjectState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SingleObjectState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SingleObjectState}
 */
proto.SingleObjectState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setSpeed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAngle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAngularspeed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStuck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SingleObjectState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SingleObjectState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SingleObjectState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SingleObjectState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getSpeed();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional VectorF2D location = 1;
 * @return {?proto.VectorF2D}
 */
proto.SingleObjectState.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 1));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.SingleObjectState} returns this
*/
proto.SingleObjectState.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SingleObjectState} returns this
 */
proto.SingleObjectState.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SingleObjectState.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VectorF2D speed = 2;
 * @return {?proto.VectorF2D}
 */
proto.SingleObjectState.prototype.getSpeed = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 2));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.SingleObjectState} returns this
*/
proto.SingleObjectState.prototype.setSpeed = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SingleObjectState} returns this
 */
proto.SingleObjectState.prototype.clearSpeed = function() {
  return this.setSpeed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SingleObjectState.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float angle = 3;
 * @return {number}
 */
proto.SingleObjectState.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SingleObjectState} returns this
 */
proto.SingleObjectState.prototype.setAngle = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SingleObjectState} returns this
 */
proto.SingleObjectState.prototype.clearAngle = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SingleObjectState.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float angularSpeed = 4;
 * @return {number}
 */
proto.SingleObjectState.prototype.getAngularspeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SingleObjectState} returns this
 */
proto.SingleObjectState.prototype.setAngularspeed = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SingleObjectState} returns this
 */
proto.SingleObjectState.prototype.clearAngularspeed = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SingleObjectState.prototype.hasAngularspeed = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float stuck = 5;
 * @return {number}
 */
proto.SingleObjectState.prototype.getStuck = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SingleObjectState} returns this
 */
proto.SingleObjectState.prototype.setStuck = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SingleObjectState} returns this
 */
proto.SingleObjectState.prototype.clearStuck = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SingleObjectState.prototype.hasStuck = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SingleWirelessCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.SingleWirelessCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SingleWirelessCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SingleWirelessCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    vx: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    vy: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    w: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SingleWirelessCommand}
 */
proto.SingleWirelessCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SingleWirelessCommand;
  return proto.SingleWirelessCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SingleWirelessCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SingleWirelessCommand}
 */
proto.SingleWirelessCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVy(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setW(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SingleWirelessCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SingleWirelessCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SingleWirelessCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SingleWirelessCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * required float Vx = 1;
 * @return {number}
 */
proto.SingleWirelessCommand.prototype.getVx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SingleWirelessCommand} returns this
 */
proto.SingleWirelessCommand.prototype.setVx = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SingleWirelessCommand} returns this
 */
proto.SingleWirelessCommand.prototype.clearVx = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SingleWirelessCommand.prototype.hasVx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float Vy = 2;
 * @return {number}
 */
proto.SingleWirelessCommand.prototype.getVy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SingleWirelessCommand} returns this
 */
proto.SingleWirelessCommand.prototype.setVy = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SingleWirelessCommand} returns this
 */
proto.SingleWirelessCommand.prototype.clearVy = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SingleWirelessCommand.prototype.hasVy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float W = 3;
 * @return {number}
 */
proto.SingleWirelessCommand.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.SingleWirelessCommand} returns this
 */
proto.SingleWirelessCommand.prototype.setW = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SingleWirelessCommand} returns this
 */
proto.SingleWirelessCommand.prototype.clearW = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SingleWirelessCommand.prototype.hasW = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RobotCommands.prototype.toObject = function(opt_includeInstance) {
  return proto.RobotCommands.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RobotCommands} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobotCommands.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandsMap: (f = msg.getCommandsMap()) ? f.toObject(includeInstance, proto.SingleWirelessCommand.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RobotCommands}
 */
proto.RobotCommands.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RobotCommands;
  return proto.RobotCommands.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RobotCommands} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RobotCommands}
 */
proto.RobotCommands.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getCommandsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.SingleWirelessCommand.deserializeBinaryFromReader, 0, new proto.SingleWirelessCommand());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RobotCommands.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RobotCommands.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RobotCommands} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobotCommands.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.SingleWirelessCommand.serializeBinaryToWriter);
  }
};


/**
 * map<int32, SingleWirelessCommand> Commands = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.SingleWirelessCommand>}
 */
proto.RobotCommands.prototype.getCommandsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.SingleWirelessCommand>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.SingleWirelessCommand));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.RobotCommands} returns this
 */
proto.RobotCommands.prototype.clearCommandsMap = function() {
  this.getCommandsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WorldModel.prototype.toObject = function(opt_includeInstance) {
  return proto.WorldModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WorldModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WorldModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    ourmarkerisyellow: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    fieldisinverted: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    goalieid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    ourrobotsMap: (f = msg.getOurrobotsMap()) ? f.toObject(includeInstance, proto.SingleObjectState.toObject) : [],
    opponentsMap: (f = msg.getOpponentsMap()) ? f.toObject(includeInstance, proto.SingleObjectState.toObject) : [],
    ballstate: (f = msg.getBallstate()) && proto.SingleObjectState.toObject(includeInstance, f),
    observations: (f = msg.getObservations()) && proto.ObservationModel.toObject(includeInstance, f),
    commands: (f = msg.getCommands()) && proto.RobotCommands.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WorldModel}
 */
proto.WorldModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WorldModel;
  return proto.WorldModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WorldModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WorldModel}
 */
proto.WorldModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOurmarkerisyellow(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFieldisinverted(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGoalieid(value);
      break;
    case 4:
      var value = msg.getOurrobotsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.SingleObjectState.deserializeBinaryFromReader, 0, new proto.SingleObjectState());
         });
      break;
    case 5:
      var value = msg.getOpponentsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.SingleObjectState.deserializeBinaryFromReader, 0, new proto.SingleObjectState());
         });
      break;
    case 6:
      var value = new proto.SingleObjectState;
      reader.readMessage(value,proto.SingleObjectState.deserializeBinaryFromReader);
      msg.setBallstate(value);
      break;
    case 7:
      var value = new proto.ObservationModel;
      reader.readMessage(value,proto.ObservationModel.deserializeBinaryFromReader);
      msg.setObservations(value);
      break;
    case 8:
      var value = new proto.RobotCommands;
      reader.readMessage(value,proto.RobotCommands.deserializeBinaryFromReader);
      msg.setCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WorldModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WorldModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WorldModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WorldModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOurrobotsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.SingleObjectState.serializeBinaryToWriter);
  }
  f = message.getOpponentsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.SingleObjectState.serializeBinaryToWriter);
  }
  f = message.getBallstate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.SingleObjectState.serializeBinaryToWriter
    );
  }
  f = message.getObservations();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ObservationModel.serializeBinaryToWriter
    );
  }
  f = message.getCommands();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.RobotCommands.serializeBinaryToWriter
    );
  }
};


/**
 * required bool OurMarkerIsYellow = 1;
 * @return {boolean}
 */
proto.WorldModel.prototype.getOurmarkerisyellow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WorldModel} returns this
 */
proto.WorldModel.prototype.setOurmarkerisyellow = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.WorldModel} returns this
 */
proto.WorldModel.prototype.clearOurmarkerisyellow = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WorldModel.prototype.hasOurmarkerisyellow = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool FieldIsInverted = 2;
 * @return {boolean}
 */
proto.WorldModel.prototype.getFieldisinverted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.WorldModel} returns this
 */
proto.WorldModel.prototype.setFieldisinverted = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.WorldModel} returns this
 */
proto.WorldModel.prototype.clearFieldisinverted = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WorldModel.prototype.hasFieldisinverted = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 GoalieID = 3;
 * @return {number}
 */
proto.WorldModel.prototype.getGoalieid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.WorldModel} returns this
 */
proto.WorldModel.prototype.setGoalieid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.WorldModel} returns this
 */
proto.WorldModel.prototype.clearGoalieid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WorldModel.prototype.hasGoalieid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<int32, SingleObjectState> OurRobots = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.SingleObjectState>}
 */
proto.WorldModel.prototype.getOurrobotsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.SingleObjectState>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.SingleObjectState));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.WorldModel} returns this
 */
proto.WorldModel.prototype.clearOurrobotsMap = function() {
  this.getOurrobotsMap().clear();
  return this;};


/**
 * map<int32, SingleObjectState> Opponents = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.SingleObjectState>}
 */
proto.WorldModel.prototype.getOpponentsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.SingleObjectState>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.SingleObjectState));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.WorldModel} returns this
 */
proto.WorldModel.prototype.clearOpponentsMap = function() {
  this.getOpponentsMap().clear();
  return this;};


/**
 * optional SingleObjectState BallState = 6;
 * @return {?proto.SingleObjectState}
 */
proto.WorldModel.prototype.getBallstate = function() {
  return /** @type{?proto.SingleObjectState} */ (
    jspb.Message.getWrapperField(this, proto.SingleObjectState, 6));
};


/**
 * @param {?proto.SingleObjectState|undefined} value
 * @return {!proto.WorldModel} returns this
*/
proto.WorldModel.prototype.setBallstate = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WorldModel} returns this
 */
proto.WorldModel.prototype.clearBallstate = function() {
  return this.setBallstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WorldModel.prototype.hasBallstate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ObservationModel Observations = 7;
 * @return {?proto.ObservationModel}
 */
proto.WorldModel.prototype.getObservations = function() {
  return /** @type{?proto.ObservationModel} */ (
    jspb.Message.getWrapperField(this, proto.ObservationModel, 7));
};


/**
 * @param {?proto.ObservationModel|undefined} value
 * @return {!proto.WorldModel} returns this
*/
proto.WorldModel.prototype.setObservations = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WorldModel} returns this
 */
proto.WorldModel.prototype.clearObservations = function() {
  return this.setObservations(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WorldModel.prototype.hasObservations = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RobotCommands Commands = 8;
 * @return {?proto.RobotCommands}
 */
proto.WorldModel.prototype.getCommands = function() {
  return /** @type{?proto.RobotCommands} */ (
    jspb.Message.getWrapperField(this, proto.RobotCommands, 8));
};


/**
 * @param {?proto.RobotCommands|undefined} value
 * @return {!proto.WorldModel} returns this
*/
proto.WorldModel.prototype.setCommands = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WorldModel} returns this
 */
proto.WorldModel.prototype.clearCommands = function() {
  return this.setCommands(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WorldModel.prototype.hasCommands = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FieldConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.FieldConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FieldConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FieldConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    boundarywidth: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    thickness: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    centercircleradius: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    ourleftcorner: (f = msg.getOurleftcorner()) && proto.VectorF2D.toObject(includeInstance, f),
    ourrightcorner: (f = msg.getOurrightcorner()) && proto.VectorF2D.toObject(includeInstance, f),
    oppleftcorner: (f = msg.getOppleftcorner()) && proto.VectorF2D.toObject(includeInstance, f),
    opprightcorner: (f = msg.getOpprightcorner()) && proto.VectorF2D.toObject(includeInstance, f),
    ourgoalcenter: (f = msg.getOurgoalcenter()) && proto.VectorF2D.toObject(includeInstance, f),
    ourgoalright: (f = msg.getOurgoalright()) && proto.VectorF2D.toObject(includeInstance, f),
    ourgoalleft: (f = msg.getOurgoalleft()) && proto.VectorF2D.toObject(includeInstance, f),
    ourgoaldepthright: (f = msg.getOurgoaldepthright()) && proto.VectorF2D.toObject(includeInstance, f),
    ourgoaldepthleft: (f = msg.getOurgoaldepthleft()) && proto.VectorF2D.toObject(includeInstance, f),
    ourpenaltybackright: (f = msg.getOurpenaltybackright()) && proto.VectorF2D.toObject(includeInstance, f),
    ourpenaltybackleft: (f = msg.getOurpenaltybackleft()) && proto.VectorF2D.toObject(includeInstance, f),
    ourpenaltyrearright: (f = msg.getOurpenaltyrearright()) && proto.VectorF2D.toObject(includeInstance, f),
    ourpenaltyrearleft: (f = msg.getOurpenaltyrearleft()) && proto.VectorF2D.toObject(includeInstance, f),
    oppgoalcenter: (f = msg.getOppgoalcenter()) && proto.VectorF2D.toObject(includeInstance, f),
    oppgoalright: (f = msg.getOppgoalright()) && proto.VectorF2D.toObject(includeInstance, f),
    oppgoalleft: (f = msg.getOppgoalleft()) && proto.VectorF2D.toObject(includeInstance, f),
    oppgoaldepthright: (f = msg.getOppgoaldepthright()) && proto.VectorF2D.toObject(includeInstance, f),
    oppgoaldepthleft: (f = msg.getOppgoaldepthleft()) && proto.VectorF2D.toObject(includeInstance, f),
    opppenaltybackright: (f = msg.getOpppenaltybackright()) && proto.VectorF2D.toObject(includeInstance, f),
    opppenaltybackleft: (f = msg.getOpppenaltybackleft()) && proto.VectorF2D.toObject(includeInstance, f),
    opppenaltyrearright: (f = msg.getOpppenaltyrearright()) && proto.VectorF2D.toObject(includeInstance, f),
    opppenaltyrearleft: (f = msg.getOpppenaltyrearleft()) && proto.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FieldConfig}
 */
proto.FieldConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FieldConfig;
  return proto.FieldConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FieldConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FieldConfig}
 */
proto.FieldConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBoundarywidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThickness(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCentercircleradius(value);
      break;
    case 4:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOurleftcorner(value);
      break;
    case 5:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOurrightcorner(value);
      break;
    case 6:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOppleftcorner(value);
      break;
    case 7:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOpprightcorner(value);
      break;
    case 8:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOurgoalcenter(value);
      break;
    case 9:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOurgoalright(value);
      break;
    case 10:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOurgoalleft(value);
      break;
    case 11:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOurgoaldepthright(value);
      break;
    case 12:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOurgoaldepthleft(value);
      break;
    case 13:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOurpenaltybackright(value);
      break;
    case 14:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOurpenaltybackleft(value);
      break;
    case 15:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOurpenaltyrearright(value);
      break;
    case 16:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOurpenaltyrearleft(value);
      break;
    case 17:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOppgoalcenter(value);
      break;
    case 18:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOppgoalright(value);
      break;
    case 19:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOppgoalleft(value);
      break;
    case 20:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOppgoaldepthright(value);
      break;
    case 21:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOppgoaldepthleft(value);
      break;
    case 22:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOpppenaltybackright(value);
      break;
    case 23:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOpppenaltybackleft(value);
      break;
    case 24:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOpppenaltyrearright(value);
      break;
    case 25:
      var value = new proto.VectorF2D;
      reader.readMessage(value,proto.VectorF2D.deserializeBinaryFromReader);
      msg.setOpppenaltyrearleft(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FieldConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FieldConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FieldConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FieldConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getOurleftcorner();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOurrightcorner();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOppleftcorner();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOpprightcorner();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOurgoalcenter();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOurgoalright();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOurgoalleft();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOurgoaldepthright();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOurgoaldepthleft();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOurpenaltybackright();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOurpenaltybackleft();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOurpenaltyrearright();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOurpenaltyrearleft();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOppgoalcenter();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOppgoalright();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOppgoalleft();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOppgoaldepthright();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOppgoaldepthleft();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOpppenaltybackright();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOpppenaltybackleft();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOpppenaltyrearright();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getOpppenaltyrearleft();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required float BoundaryWidth = 1;
 * @return {number}
 */
proto.FieldConfig.prototype.getBoundarywidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.setBoundarywidth = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearBoundarywidth = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasBoundarywidth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float Thickness = 2;
 * @return {number}
 */
proto.FieldConfig.prototype.getThickness = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.setThickness = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearThickness = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasThickness = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float CenterCircleRadius = 3;
 * @return {number}
 */
proto.FieldConfig.prototype.getCentercircleradius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.setCentercircleradius = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearCentercircleradius = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasCentercircleradius = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VectorF2D OurLeftCorner = 4;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOurleftcorner = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 4));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOurleftcorner = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOurleftcorner = function() {
  return this.setOurleftcorner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOurleftcorner = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional VectorF2D OurRightCorner = 5;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOurrightcorner = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 5));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOurrightcorner = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOurrightcorner = function() {
  return this.setOurrightcorner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOurrightcorner = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional VectorF2D OppLeftCorner = 6;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOppleftcorner = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 6));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOppleftcorner = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOppleftcorner = function() {
  return this.setOppleftcorner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOppleftcorner = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional VectorF2D OppRightCorner = 7;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOpprightcorner = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 7));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOpprightcorner = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOpprightcorner = function() {
  return this.setOpprightcorner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOpprightcorner = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional VectorF2D OurGoalCenter = 8;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOurgoalcenter = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 8));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOurgoalcenter = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOurgoalcenter = function() {
  return this.setOurgoalcenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOurgoalcenter = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional VectorF2D OurGoalRight = 9;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOurgoalright = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 9));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOurgoalright = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOurgoalright = function() {
  return this.setOurgoalright(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOurgoalright = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional VectorF2D OurGoalLeft = 10;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOurgoalleft = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 10));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOurgoalleft = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOurgoalleft = function() {
  return this.setOurgoalleft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOurgoalleft = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional VectorF2D OurGoalDepthRight = 11;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOurgoaldepthright = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 11));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOurgoaldepthright = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOurgoaldepthright = function() {
  return this.setOurgoaldepthright(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOurgoaldepthright = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional VectorF2D OurGoalDepthLeft = 12;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOurgoaldepthleft = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 12));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOurgoaldepthleft = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOurgoaldepthleft = function() {
  return this.setOurgoaldepthleft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOurgoaldepthleft = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional VectorF2D OurPenaltyBackRight = 13;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOurpenaltybackright = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 13));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOurpenaltybackright = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOurpenaltybackright = function() {
  return this.setOurpenaltybackright(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOurpenaltybackright = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional VectorF2D OurPenaltyBackLeft = 14;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOurpenaltybackleft = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 14));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOurpenaltybackleft = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOurpenaltybackleft = function() {
  return this.setOurpenaltybackleft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOurpenaltybackleft = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional VectorF2D OurPenaltyRearRight = 15;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOurpenaltyrearright = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 15));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOurpenaltyrearright = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOurpenaltyrearright = function() {
  return this.setOurpenaltyrearright(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOurpenaltyrearright = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional VectorF2D OurPenaltyRearLeft = 16;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOurpenaltyrearleft = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 16));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOurpenaltyrearleft = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOurpenaltyrearleft = function() {
  return this.setOurpenaltyrearleft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOurpenaltyrearleft = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional VectorF2D OppGoalCenter = 17;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOppgoalcenter = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 17));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOppgoalcenter = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOppgoalcenter = function() {
  return this.setOppgoalcenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOppgoalcenter = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional VectorF2D OppGoalRight = 18;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOppgoalright = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 18));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOppgoalright = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOppgoalright = function() {
  return this.setOppgoalright(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOppgoalright = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional VectorF2D OppGoalLeft = 19;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOppgoalleft = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 19));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOppgoalleft = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOppgoalleft = function() {
  return this.setOppgoalleft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOppgoalleft = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional VectorF2D OppGoalDepthRight = 20;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOppgoaldepthright = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 20));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOppgoaldepthright = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOppgoaldepthright = function() {
  return this.setOppgoaldepthright(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOppgoaldepthright = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional VectorF2D OppGoalDepthLeft = 21;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOppgoaldepthleft = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 21));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOppgoaldepthleft = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOppgoaldepthleft = function() {
  return this.setOppgoaldepthleft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOppgoaldepthleft = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional VectorF2D OppPenaltyBackRight = 22;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOpppenaltybackright = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 22));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOpppenaltybackright = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOpppenaltybackright = function() {
  return this.setOpppenaltybackright(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOpppenaltybackright = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional VectorF2D OppPenaltyBackLeft = 23;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOpppenaltybackleft = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 23));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOpppenaltybackleft = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOpppenaltybackleft = function() {
  return this.setOpppenaltybackleft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOpppenaltybackleft = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional VectorF2D OppPenaltyRearRight = 24;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOpppenaltyrearright = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 24));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOpppenaltyrearright = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOpppenaltyrearright = function() {
  return this.setOpppenaltyrearright(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOpppenaltyrearright = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional VectorF2D OppPenaltyRearLeft = 25;
 * @return {?proto.VectorF2D}
 */
proto.FieldConfig.prototype.getOpppenaltyrearleft = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, proto.VectorF2D, 25));
};


/**
 * @param {?proto.VectorF2D|undefined} value
 * @return {!proto.FieldConfig} returns this
*/
proto.FieldConfig.prototype.setOpppenaltyrearleft = function(value) {
  return jspb.Message.setWrapperField(this, 25, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FieldConfig} returns this
 */
proto.FieldConfig.prototype.clearOpppenaltyrearleft = function() {
  return this.setOpppenaltyrearleft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FieldConfig.prototype.hasOpppenaltyrearleft = function() {
  return jspb.Message.getField(this, 25) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Packet.prototype.toObject = function(opt_includeInstance) {
  return proto.Packet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Packet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Packet.toObject = function(includeInstance, msg) {
  var f, obj = {
    worldmodel: (f = msg.getWorldmodel()) && proto.WorldModel.toObject(includeInstance, f),
    fieldconfig: (f = msg.getFieldconfig()) && proto.FieldConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Packet}
 */
proto.Packet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Packet;
  return proto.Packet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Packet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Packet}
 */
proto.Packet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WorldModel;
      reader.readMessage(value,proto.WorldModel.deserializeBinaryFromReader);
      msg.setWorldmodel(value);
      break;
    case 2:
      var value = new proto.FieldConfig;
      reader.readMessage(value,proto.FieldConfig.deserializeBinaryFromReader);
      msg.setFieldconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Packet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Packet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Packet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Packet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorldmodel();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.WorldModel.serializeBinaryToWriter
    );
  }
  f = message.getFieldconfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.FieldConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional WorldModel worldModel = 1;
 * @return {?proto.WorldModel}
 */
proto.Packet.prototype.getWorldmodel = function() {
  return /** @type{?proto.WorldModel} */ (
    jspb.Message.getWrapperField(this, proto.WorldModel, 1));
};


/**
 * @param {?proto.WorldModel|undefined} value
 * @return {!proto.Packet} returns this
*/
proto.Packet.prototype.setWorldmodel = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearWorldmodel = function() {
  return this.setWorldmodel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasWorldmodel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FieldConfig fieldConfig = 2;
 * @return {?proto.FieldConfig}
 */
proto.Packet.prototype.getFieldconfig = function() {
  return /** @type{?proto.FieldConfig} */ (
    jspb.Message.getWrapperField(this, proto.FieldConfig, 2));
};


/**
 * @param {?proto.FieldConfig|undefined} value
 * @return {!proto.Packet} returns this
*/
proto.Packet.prototype.setFieldconfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Packet} returns this
 */
proto.Packet.prototype.clearFieldconfig = function() {
  return this.setFieldconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Packet.prototype.hasFieldconfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.OccludeType = {
  VISIBLE: 0,
  MAYBEOCCLUDED: 1,
  OCCLUDED: 2
};

goog.object.extend(exports, proto);
