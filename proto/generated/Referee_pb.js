/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Common_pb = require('./Common_pb.js');
goog.exportSymbol('proto.Division', null, global);
goog.exportSymbol('proto.GameEvent', null, global);
goog.exportSymbol('proto.GameEvent.AimlessKick', null, global);
goog.exportSymbol('proto.GameEvent.AttackerDoubleTouchedBall', null, global);
goog.exportSymbol('proto.GameEvent.AttackerTooCloseToDefenseArea', null, global);
goog.exportSymbol('proto.GameEvent.AttackerTouchedBallInDefenseArea', null, global);
goog.exportSymbol('proto.GameEvent.AttackerTouchedOpponentInDefenseArea', null, global);
goog.exportSymbol('proto.GameEvent.BallLeftField', null, global);
goog.exportSymbol('proto.GameEvent.BotCrashDrawn', null, global);
goog.exportSymbol('proto.GameEvent.BotCrashUnique', null, global);
goog.exportSymbol('proto.GameEvent.BotDribbledBallTooFar', null, global);
goog.exportSymbol('proto.GameEvent.BotHeldBallDeliberately', null, global);
goog.exportSymbol('proto.GameEvent.BotInterferedPlacement', null, global);
goog.exportSymbol('proto.GameEvent.BotKickedBallTooFast', null, global);
goog.exportSymbol('proto.GameEvent.BotPushedBot', null, global);
goog.exportSymbol('proto.GameEvent.BotSubstitution', null, global);
goog.exportSymbol('proto.GameEvent.BotTippedOver', null, global);
goog.exportSymbol('proto.GameEvent.BotTooFastInStop', null, global);
goog.exportSymbol('proto.GameEvent.BoundaryCrossing', null, global);
goog.exportSymbol('proto.GameEvent.ChallengeFlag', null, global);
goog.exportSymbol('proto.GameEvent.ChippedGoal', null, global);
goog.exportSymbol('proto.GameEvent.DefenderInDefenseArea', null, global);
goog.exportSymbol('proto.GameEvent.DefenderInDefenseAreaPartially', null, global);
goog.exportSymbol('proto.GameEvent.DefenderTooCloseToKickPoint', null, global);
goog.exportSymbol('proto.GameEvent.EmergencyStop', null, global);
goog.exportSymbol('proto.GameEvent.Goal', null, global);
goog.exportSymbol('proto.GameEvent.IndirectGoal', null, global);
goog.exportSymbol('proto.GameEvent.KeeperHeldBall', null, global);
goog.exportSymbol('proto.GameEvent.KickTimeout', null, global);
goog.exportSymbol('proto.GameEvent.MultipleCards', null, global);
goog.exportSymbol('proto.GameEvent.MultipleFouls', null, global);
goog.exportSymbol('proto.GameEvent.MultiplePlacementFailures', null, global);
goog.exportSymbol('proto.GameEvent.NoProgressInGame', null, global);
goog.exportSymbol('proto.GameEvent.PenaltyKickFailed', null, global);
goog.exportSymbol('proto.GameEvent.PlacementFailed', null, global);
goog.exportSymbol('proto.GameEvent.PlacementSucceeded', null, global);
goog.exportSymbol('proto.GameEvent.Prepared', null, global);
goog.exportSymbol('proto.GameEvent.TooManyRobots', null, global);
goog.exportSymbol('proto.GameEvent.Type', null, global);
goog.exportSymbol('proto.GameEvent.UnsportingBehaviorMajor', null, global);
goog.exportSymbol('proto.GameEvent.UnsportingBehaviorMinor', null, global);
goog.exportSymbol('proto.GameEventProposalGroup', null, global);
goog.exportSymbol('proto.Referee', null, global);
goog.exportSymbol('proto.Referee.Command', null, global);
goog.exportSymbol('proto.Referee.Stage', null, global);
goog.exportSymbol('proto.Referee.TeamInfo', null, global);
goog.exportSymbol('proto.RobotId', null, global);
goog.exportSymbol('proto.Team', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RobotId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RobotId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RobotId.displayName = 'proto.RobotId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RobotId.prototype.toObject = function(opt_includeInstance) {
  return proto.RobotId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RobotId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobotId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    team: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RobotId}
 */
proto.RobotId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RobotId;
  return proto.RobotId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RobotId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RobotId}
 */
proto.RobotId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RobotId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RobotId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RobotId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RobotId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.RobotId.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RobotId.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.RobotId.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RobotId.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Team team = 2;
 * @return {!proto.Team}
 */
proto.RobotId.prototype.getTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Team} value */
proto.RobotId.prototype.setTeam = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.RobotId.prototype.clearTeam = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RobotId.prototype.hasTeam = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GameEvent.repeatedFields_, proto.GameEvent.oneofGroups_);
};
goog.inherits(proto.GameEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.displayName = 'proto.GameEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GameEvent.repeatedFields_ = [41];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.GameEvent.oneofGroups_ = [[6,7,11,19,31,43,13,17,24,26,27,15,18,22,21,29,28,20,39,8,44,14,5,45,2,3,32,34,37,38,46,47,35,36,1,9,10,12,16,42,23,25,30,33]];

/**
 * @enum {number}
 */
proto.GameEvent.EventCase = {
  EVENT_NOT_SET: 0,
  BALL_LEFT_FIELD_TOUCH_LINE: 6,
  BALL_LEFT_FIELD_GOAL_LINE: 7,
  AIMLESS_KICK: 11,
  ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA: 19,
  DEFENDER_IN_DEFENSE_AREA: 31,
  BOUNDARY_CROSSING: 43,
  KEEPER_HELD_BALL: 13,
  BOT_DRIBBLED_BALL_TOO_FAR: 17,
  BOT_PUSHED_BOT: 24,
  BOT_HELD_BALL_DELIBERATELY: 26,
  BOT_TIPPED_OVER: 27,
  ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA: 15,
  BOT_KICKED_BALL_TOO_FAST: 18,
  BOT_CRASH_UNIQUE: 22,
  BOT_CRASH_DRAWN: 21,
  DEFENDER_TOO_CLOSE_TO_KICK_POINT: 29,
  BOT_TOO_FAST_IN_STOP: 28,
  BOT_INTERFERED_PLACEMENT: 20,
  POSSIBLE_GOAL: 39,
  GOAL: 8,
  INVALID_GOAL: 44,
  ATTACKER_DOUBLE_TOUCHED_BALL: 14,
  PLACEMENT_SUCCEEDED: 5,
  PENALTY_KICK_FAILED: 45,
  NO_PROGRESS_IN_GAME: 2,
  PLACEMENT_FAILED: 3,
  MULTIPLE_CARDS: 32,
  MULTIPLE_FOULS: 34,
  BOT_SUBSTITUTION: 37,
  TOO_MANY_ROBOTS: 38,
  CHALLENGE_FLAG: 46,
  EMERGENCY_STOP: 47,
  UNSPORTING_BEHAVIOR_MINOR: 35,
  UNSPORTING_BEHAVIOR_MAJOR: 36,
  PREPARED: 1,
  INDIRECT_GOAL: 9,
  CHIPPED_GOAL: 10,
  KICK_TIMEOUT: 12,
  ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA: 16,
  ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED: 42,
  BOT_CRASH_UNIQUE_SKIPPED: 23,
  BOT_PUSHED_BOT_SKIPPED: 25,
  DEFENDER_IN_DEFENSE_AREA_PARTIALLY: 30,
  MULTIPLE_PLACEMENT_FAILURES: 33
};

/**
 * @return {proto.GameEvent.EventCase}
 */
proto.GameEvent.prototype.getEventCase = function() {
  return /** @type {proto.GameEvent.EventCase} */(jspb.Message.computeOneofCase(this, proto.GameEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 40),
    originList: jspb.Message.getRepeatedField(msg, 41),
    ballLeftFieldTouchLine: (f = msg.getBallLeftFieldTouchLine()) && proto.GameEvent.BallLeftField.toObject(includeInstance, f),
    ballLeftFieldGoalLine: (f = msg.getBallLeftFieldGoalLine()) && proto.GameEvent.BallLeftField.toObject(includeInstance, f),
    aimlessKick: (f = msg.getAimlessKick()) && proto.GameEvent.AimlessKick.toObject(includeInstance, f),
    attackerTooCloseToDefenseArea: (f = msg.getAttackerTooCloseToDefenseArea()) && proto.GameEvent.AttackerTooCloseToDefenseArea.toObject(includeInstance, f),
    defenderInDefenseArea: (f = msg.getDefenderInDefenseArea()) && proto.GameEvent.DefenderInDefenseArea.toObject(includeInstance, f),
    boundaryCrossing: (f = msg.getBoundaryCrossing()) && proto.GameEvent.BoundaryCrossing.toObject(includeInstance, f),
    keeperHeldBall: (f = msg.getKeeperHeldBall()) && proto.GameEvent.KeeperHeldBall.toObject(includeInstance, f),
    botDribbledBallTooFar: (f = msg.getBotDribbledBallTooFar()) && proto.GameEvent.BotDribbledBallTooFar.toObject(includeInstance, f),
    botPushedBot: (f = msg.getBotPushedBot()) && proto.GameEvent.BotPushedBot.toObject(includeInstance, f),
    botHeldBallDeliberately: (f = msg.getBotHeldBallDeliberately()) && proto.GameEvent.BotHeldBallDeliberately.toObject(includeInstance, f),
    botTippedOver: (f = msg.getBotTippedOver()) && proto.GameEvent.BotTippedOver.toObject(includeInstance, f),
    attackerTouchedBallInDefenseArea: (f = msg.getAttackerTouchedBallInDefenseArea()) && proto.GameEvent.AttackerTouchedBallInDefenseArea.toObject(includeInstance, f),
    botKickedBallTooFast: (f = msg.getBotKickedBallTooFast()) && proto.GameEvent.BotKickedBallTooFast.toObject(includeInstance, f),
    botCrashUnique: (f = msg.getBotCrashUnique()) && proto.GameEvent.BotCrashUnique.toObject(includeInstance, f),
    botCrashDrawn: (f = msg.getBotCrashDrawn()) && proto.GameEvent.BotCrashDrawn.toObject(includeInstance, f),
    defenderTooCloseToKickPoint: (f = msg.getDefenderTooCloseToKickPoint()) && proto.GameEvent.DefenderTooCloseToKickPoint.toObject(includeInstance, f),
    botTooFastInStop: (f = msg.getBotTooFastInStop()) && proto.GameEvent.BotTooFastInStop.toObject(includeInstance, f),
    botInterferedPlacement: (f = msg.getBotInterferedPlacement()) && proto.GameEvent.BotInterferedPlacement.toObject(includeInstance, f),
    possibleGoal: (f = msg.getPossibleGoal()) && proto.GameEvent.Goal.toObject(includeInstance, f),
    goal: (f = msg.getGoal()) && proto.GameEvent.Goal.toObject(includeInstance, f),
    invalidGoal: (f = msg.getInvalidGoal()) && proto.GameEvent.Goal.toObject(includeInstance, f),
    attackerDoubleTouchedBall: (f = msg.getAttackerDoubleTouchedBall()) && proto.GameEvent.AttackerDoubleTouchedBall.toObject(includeInstance, f),
    placementSucceeded: (f = msg.getPlacementSucceeded()) && proto.GameEvent.PlacementSucceeded.toObject(includeInstance, f),
    penaltyKickFailed: (f = msg.getPenaltyKickFailed()) && proto.GameEvent.PenaltyKickFailed.toObject(includeInstance, f),
    noProgressInGame: (f = msg.getNoProgressInGame()) && proto.GameEvent.NoProgressInGame.toObject(includeInstance, f),
    placementFailed: (f = msg.getPlacementFailed()) && proto.GameEvent.PlacementFailed.toObject(includeInstance, f),
    multipleCards: (f = msg.getMultipleCards()) && proto.GameEvent.MultipleCards.toObject(includeInstance, f),
    multipleFouls: (f = msg.getMultipleFouls()) && proto.GameEvent.MultipleFouls.toObject(includeInstance, f),
    botSubstitution: (f = msg.getBotSubstitution()) && proto.GameEvent.BotSubstitution.toObject(includeInstance, f),
    tooManyRobots: (f = msg.getTooManyRobots()) && proto.GameEvent.TooManyRobots.toObject(includeInstance, f),
    challengeFlag: (f = msg.getChallengeFlag()) && proto.GameEvent.ChallengeFlag.toObject(includeInstance, f),
    emergencyStop: (f = msg.getEmergencyStop()) && proto.GameEvent.EmergencyStop.toObject(includeInstance, f),
    unsportingBehaviorMinor: (f = msg.getUnsportingBehaviorMinor()) && proto.GameEvent.UnsportingBehaviorMinor.toObject(includeInstance, f),
    unsportingBehaviorMajor: (f = msg.getUnsportingBehaviorMajor()) && proto.GameEvent.UnsportingBehaviorMajor.toObject(includeInstance, f),
    prepared: (f = msg.getPrepared()) && proto.GameEvent.Prepared.toObject(includeInstance, f),
    indirectGoal: (f = msg.getIndirectGoal()) && proto.GameEvent.IndirectGoal.toObject(includeInstance, f),
    chippedGoal: (f = msg.getChippedGoal()) && proto.GameEvent.ChippedGoal.toObject(includeInstance, f),
    kickTimeout: (f = msg.getKickTimeout()) && proto.GameEvent.KickTimeout.toObject(includeInstance, f),
    attackerTouchedOpponentInDefenseArea: (f = msg.getAttackerTouchedOpponentInDefenseArea()) && proto.GameEvent.AttackerTouchedOpponentInDefenseArea.toObject(includeInstance, f),
    attackerTouchedOpponentInDefenseAreaSkipped: (f = msg.getAttackerTouchedOpponentInDefenseAreaSkipped()) && proto.GameEvent.AttackerTouchedOpponentInDefenseArea.toObject(includeInstance, f),
    botCrashUniqueSkipped: (f = msg.getBotCrashUniqueSkipped()) && proto.GameEvent.BotCrashUnique.toObject(includeInstance, f),
    botPushedBotSkipped: (f = msg.getBotPushedBotSkipped()) && proto.GameEvent.BotPushedBot.toObject(includeInstance, f),
    defenderInDefenseAreaPartially: (f = msg.getDefenderInDefenseAreaPartially()) && proto.GameEvent.DefenderInDefenseAreaPartially.toObject(includeInstance, f),
    multiplePlacementFailures: (f = msg.getMultiplePlacementFailures()) && proto.GameEvent.MultiplePlacementFailures.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent}
 */
proto.GameEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent;
  return proto.GameEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent}
 */
proto.GameEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 40:
      var value = /** @type {!proto.GameEvent.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.addOrigin(value);
      break;
    case 6:
      var value = new proto.GameEvent.BallLeftField;
      reader.readMessage(value,proto.GameEvent.BallLeftField.deserializeBinaryFromReader);
      msg.setBallLeftFieldTouchLine(value);
      break;
    case 7:
      var value = new proto.GameEvent.BallLeftField;
      reader.readMessage(value,proto.GameEvent.BallLeftField.deserializeBinaryFromReader);
      msg.setBallLeftFieldGoalLine(value);
      break;
    case 11:
      var value = new proto.GameEvent.AimlessKick;
      reader.readMessage(value,proto.GameEvent.AimlessKick.deserializeBinaryFromReader);
      msg.setAimlessKick(value);
      break;
    case 19:
      var value = new proto.GameEvent.AttackerTooCloseToDefenseArea;
      reader.readMessage(value,proto.GameEvent.AttackerTooCloseToDefenseArea.deserializeBinaryFromReader);
      msg.setAttackerTooCloseToDefenseArea(value);
      break;
    case 31:
      var value = new proto.GameEvent.DefenderInDefenseArea;
      reader.readMessage(value,proto.GameEvent.DefenderInDefenseArea.deserializeBinaryFromReader);
      msg.setDefenderInDefenseArea(value);
      break;
    case 43:
      var value = new proto.GameEvent.BoundaryCrossing;
      reader.readMessage(value,proto.GameEvent.BoundaryCrossing.deserializeBinaryFromReader);
      msg.setBoundaryCrossing(value);
      break;
    case 13:
      var value = new proto.GameEvent.KeeperHeldBall;
      reader.readMessage(value,proto.GameEvent.KeeperHeldBall.deserializeBinaryFromReader);
      msg.setKeeperHeldBall(value);
      break;
    case 17:
      var value = new proto.GameEvent.BotDribbledBallTooFar;
      reader.readMessage(value,proto.GameEvent.BotDribbledBallTooFar.deserializeBinaryFromReader);
      msg.setBotDribbledBallTooFar(value);
      break;
    case 24:
      var value = new proto.GameEvent.BotPushedBot;
      reader.readMessage(value,proto.GameEvent.BotPushedBot.deserializeBinaryFromReader);
      msg.setBotPushedBot(value);
      break;
    case 26:
      var value = new proto.GameEvent.BotHeldBallDeliberately;
      reader.readMessage(value,proto.GameEvent.BotHeldBallDeliberately.deserializeBinaryFromReader);
      msg.setBotHeldBallDeliberately(value);
      break;
    case 27:
      var value = new proto.GameEvent.BotTippedOver;
      reader.readMessage(value,proto.GameEvent.BotTippedOver.deserializeBinaryFromReader);
      msg.setBotTippedOver(value);
      break;
    case 15:
      var value = new proto.GameEvent.AttackerTouchedBallInDefenseArea;
      reader.readMessage(value,proto.GameEvent.AttackerTouchedBallInDefenseArea.deserializeBinaryFromReader);
      msg.setAttackerTouchedBallInDefenseArea(value);
      break;
    case 18:
      var value = new proto.GameEvent.BotKickedBallTooFast;
      reader.readMessage(value,proto.GameEvent.BotKickedBallTooFast.deserializeBinaryFromReader);
      msg.setBotKickedBallTooFast(value);
      break;
    case 22:
      var value = new proto.GameEvent.BotCrashUnique;
      reader.readMessage(value,proto.GameEvent.BotCrashUnique.deserializeBinaryFromReader);
      msg.setBotCrashUnique(value);
      break;
    case 21:
      var value = new proto.GameEvent.BotCrashDrawn;
      reader.readMessage(value,proto.GameEvent.BotCrashDrawn.deserializeBinaryFromReader);
      msg.setBotCrashDrawn(value);
      break;
    case 29:
      var value = new proto.GameEvent.DefenderTooCloseToKickPoint;
      reader.readMessage(value,proto.GameEvent.DefenderTooCloseToKickPoint.deserializeBinaryFromReader);
      msg.setDefenderTooCloseToKickPoint(value);
      break;
    case 28:
      var value = new proto.GameEvent.BotTooFastInStop;
      reader.readMessage(value,proto.GameEvent.BotTooFastInStop.deserializeBinaryFromReader);
      msg.setBotTooFastInStop(value);
      break;
    case 20:
      var value = new proto.GameEvent.BotInterferedPlacement;
      reader.readMessage(value,proto.GameEvent.BotInterferedPlacement.deserializeBinaryFromReader);
      msg.setBotInterferedPlacement(value);
      break;
    case 39:
      var value = new proto.GameEvent.Goal;
      reader.readMessage(value,proto.GameEvent.Goal.deserializeBinaryFromReader);
      msg.setPossibleGoal(value);
      break;
    case 8:
      var value = new proto.GameEvent.Goal;
      reader.readMessage(value,proto.GameEvent.Goal.deserializeBinaryFromReader);
      msg.setGoal(value);
      break;
    case 44:
      var value = new proto.GameEvent.Goal;
      reader.readMessage(value,proto.GameEvent.Goal.deserializeBinaryFromReader);
      msg.setInvalidGoal(value);
      break;
    case 14:
      var value = new proto.GameEvent.AttackerDoubleTouchedBall;
      reader.readMessage(value,proto.GameEvent.AttackerDoubleTouchedBall.deserializeBinaryFromReader);
      msg.setAttackerDoubleTouchedBall(value);
      break;
    case 5:
      var value = new proto.GameEvent.PlacementSucceeded;
      reader.readMessage(value,proto.GameEvent.PlacementSucceeded.deserializeBinaryFromReader);
      msg.setPlacementSucceeded(value);
      break;
    case 45:
      var value = new proto.GameEvent.PenaltyKickFailed;
      reader.readMessage(value,proto.GameEvent.PenaltyKickFailed.deserializeBinaryFromReader);
      msg.setPenaltyKickFailed(value);
      break;
    case 2:
      var value = new proto.GameEvent.NoProgressInGame;
      reader.readMessage(value,proto.GameEvent.NoProgressInGame.deserializeBinaryFromReader);
      msg.setNoProgressInGame(value);
      break;
    case 3:
      var value = new proto.GameEvent.PlacementFailed;
      reader.readMessage(value,proto.GameEvent.PlacementFailed.deserializeBinaryFromReader);
      msg.setPlacementFailed(value);
      break;
    case 32:
      var value = new proto.GameEvent.MultipleCards;
      reader.readMessage(value,proto.GameEvent.MultipleCards.deserializeBinaryFromReader);
      msg.setMultipleCards(value);
      break;
    case 34:
      var value = new proto.GameEvent.MultipleFouls;
      reader.readMessage(value,proto.GameEvent.MultipleFouls.deserializeBinaryFromReader);
      msg.setMultipleFouls(value);
      break;
    case 37:
      var value = new proto.GameEvent.BotSubstitution;
      reader.readMessage(value,proto.GameEvent.BotSubstitution.deserializeBinaryFromReader);
      msg.setBotSubstitution(value);
      break;
    case 38:
      var value = new proto.GameEvent.TooManyRobots;
      reader.readMessage(value,proto.GameEvent.TooManyRobots.deserializeBinaryFromReader);
      msg.setTooManyRobots(value);
      break;
    case 46:
      var value = new proto.GameEvent.ChallengeFlag;
      reader.readMessage(value,proto.GameEvent.ChallengeFlag.deserializeBinaryFromReader);
      msg.setChallengeFlag(value);
      break;
    case 47:
      var value = new proto.GameEvent.EmergencyStop;
      reader.readMessage(value,proto.GameEvent.EmergencyStop.deserializeBinaryFromReader);
      msg.setEmergencyStop(value);
      break;
    case 35:
      var value = new proto.GameEvent.UnsportingBehaviorMinor;
      reader.readMessage(value,proto.GameEvent.UnsportingBehaviorMinor.deserializeBinaryFromReader);
      msg.setUnsportingBehaviorMinor(value);
      break;
    case 36:
      var value = new proto.GameEvent.UnsportingBehaviorMajor;
      reader.readMessage(value,proto.GameEvent.UnsportingBehaviorMajor.deserializeBinaryFromReader);
      msg.setUnsportingBehaviorMajor(value);
      break;
    case 1:
      var value = new proto.GameEvent.Prepared;
      reader.readMessage(value,proto.GameEvent.Prepared.deserializeBinaryFromReader);
      msg.setPrepared(value);
      break;
    case 9:
      var value = new proto.GameEvent.IndirectGoal;
      reader.readMessage(value,proto.GameEvent.IndirectGoal.deserializeBinaryFromReader);
      msg.setIndirectGoal(value);
      break;
    case 10:
      var value = new proto.GameEvent.ChippedGoal;
      reader.readMessage(value,proto.GameEvent.ChippedGoal.deserializeBinaryFromReader);
      msg.setChippedGoal(value);
      break;
    case 12:
      var value = new proto.GameEvent.KickTimeout;
      reader.readMessage(value,proto.GameEvent.KickTimeout.deserializeBinaryFromReader);
      msg.setKickTimeout(value);
      break;
    case 16:
      var value = new proto.GameEvent.AttackerTouchedOpponentInDefenseArea;
      reader.readMessage(value,proto.GameEvent.AttackerTouchedOpponentInDefenseArea.deserializeBinaryFromReader);
      msg.setAttackerTouchedOpponentInDefenseArea(value);
      break;
    case 42:
      var value = new proto.GameEvent.AttackerTouchedOpponentInDefenseArea;
      reader.readMessage(value,proto.GameEvent.AttackerTouchedOpponentInDefenseArea.deserializeBinaryFromReader);
      msg.setAttackerTouchedOpponentInDefenseAreaSkipped(value);
      break;
    case 23:
      var value = new proto.GameEvent.BotCrashUnique;
      reader.readMessage(value,proto.GameEvent.BotCrashUnique.deserializeBinaryFromReader);
      msg.setBotCrashUniqueSkipped(value);
      break;
    case 25:
      var value = new proto.GameEvent.BotPushedBot;
      reader.readMessage(value,proto.GameEvent.BotPushedBot.deserializeBinaryFromReader);
      msg.setBotPushedBotSkipped(value);
      break;
    case 30:
      var value = new proto.GameEvent.DefenderInDefenseAreaPartially;
      reader.readMessage(value,proto.GameEvent.DefenderInDefenseAreaPartially.deserializeBinaryFromReader);
      msg.setDefenderInDefenseAreaPartially(value);
      break;
    case 33:
      var value = new proto.GameEvent.MultiplePlacementFailures;
      reader.readMessage(value,proto.GameEvent.MultiplePlacementFailures.deserializeBinaryFromReader);
      msg.setMultiplePlacementFailures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.GameEvent.Type} */ (jspb.Message.getField(message, 40));
  if (f != null) {
    writer.writeEnum(
      40,
      f
    );
  }
  f = message.getOriginList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      41,
      f
    );
  }
  f = message.getBallLeftFieldTouchLine();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.GameEvent.BallLeftField.serializeBinaryToWriter
    );
  }
  f = message.getBallLeftFieldGoalLine();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.GameEvent.BallLeftField.serializeBinaryToWriter
    );
  }
  f = message.getAimlessKick();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.GameEvent.AimlessKick.serializeBinaryToWriter
    );
  }
  f = message.getAttackerTooCloseToDefenseArea();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.GameEvent.AttackerTooCloseToDefenseArea.serializeBinaryToWriter
    );
  }
  f = message.getDefenderInDefenseArea();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.GameEvent.DefenderInDefenseArea.serializeBinaryToWriter
    );
  }
  f = message.getBoundaryCrossing();
  if (f != null) {
    writer.writeMessage(
      43,
      f,
      proto.GameEvent.BoundaryCrossing.serializeBinaryToWriter
    );
  }
  f = message.getKeeperHeldBall();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.GameEvent.KeeperHeldBall.serializeBinaryToWriter
    );
  }
  f = message.getBotDribbledBallTooFar();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.GameEvent.BotDribbledBallTooFar.serializeBinaryToWriter
    );
  }
  f = message.getBotPushedBot();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.GameEvent.BotPushedBot.serializeBinaryToWriter
    );
  }
  f = message.getBotHeldBallDeliberately();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.GameEvent.BotHeldBallDeliberately.serializeBinaryToWriter
    );
  }
  f = message.getBotTippedOver();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.GameEvent.BotTippedOver.serializeBinaryToWriter
    );
  }
  f = message.getAttackerTouchedBallInDefenseArea();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.GameEvent.AttackerTouchedBallInDefenseArea.serializeBinaryToWriter
    );
  }
  f = message.getBotKickedBallTooFast();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.GameEvent.BotKickedBallTooFast.serializeBinaryToWriter
    );
  }
  f = message.getBotCrashUnique();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.GameEvent.BotCrashUnique.serializeBinaryToWriter
    );
  }
  f = message.getBotCrashDrawn();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.GameEvent.BotCrashDrawn.serializeBinaryToWriter
    );
  }
  f = message.getDefenderTooCloseToKickPoint();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.GameEvent.DefenderTooCloseToKickPoint.serializeBinaryToWriter
    );
  }
  f = message.getBotTooFastInStop();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.GameEvent.BotTooFastInStop.serializeBinaryToWriter
    );
  }
  f = message.getBotInterferedPlacement();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.GameEvent.BotInterferedPlacement.serializeBinaryToWriter
    );
  }
  f = message.getPossibleGoal();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      proto.GameEvent.Goal.serializeBinaryToWriter
    );
  }
  f = message.getGoal();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.GameEvent.Goal.serializeBinaryToWriter
    );
  }
  f = message.getInvalidGoal();
  if (f != null) {
    writer.writeMessage(
      44,
      f,
      proto.GameEvent.Goal.serializeBinaryToWriter
    );
  }
  f = message.getAttackerDoubleTouchedBall();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.GameEvent.AttackerDoubleTouchedBall.serializeBinaryToWriter
    );
  }
  f = message.getPlacementSucceeded();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.GameEvent.PlacementSucceeded.serializeBinaryToWriter
    );
  }
  f = message.getPenaltyKickFailed();
  if (f != null) {
    writer.writeMessage(
      45,
      f,
      proto.GameEvent.PenaltyKickFailed.serializeBinaryToWriter
    );
  }
  f = message.getNoProgressInGame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GameEvent.NoProgressInGame.serializeBinaryToWriter
    );
  }
  f = message.getPlacementFailed();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.GameEvent.PlacementFailed.serializeBinaryToWriter
    );
  }
  f = message.getMultipleCards();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.GameEvent.MultipleCards.serializeBinaryToWriter
    );
  }
  f = message.getMultipleFouls();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.GameEvent.MultipleFouls.serializeBinaryToWriter
    );
  }
  f = message.getBotSubstitution();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.GameEvent.BotSubstitution.serializeBinaryToWriter
    );
  }
  f = message.getTooManyRobots();
  if (f != null) {
    writer.writeMessage(
      38,
      f,
      proto.GameEvent.TooManyRobots.serializeBinaryToWriter
    );
  }
  f = message.getChallengeFlag();
  if (f != null) {
    writer.writeMessage(
      46,
      f,
      proto.GameEvent.ChallengeFlag.serializeBinaryToWriter
    );
  }
  f = message.getEmergencyStop();
  if (f != null) {
    writer.writeMessage(
      47,
      f,
      proto.GameEvent.EmergencyStop.serializeBinaryToWriter
    );
  }
  f = message.getUnsportingBehaviorMinor();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.GameEvent.UnsportingBehaviorMinor.serializeBinaryToWriter
    );
  }
  f = message.getUnsportingBehaviorMajor();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.GameEvent.UnsportingBehaviorMajor.serializeBinaryToWriter
    );
  }
  f = message.getPrepared();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.GameEvent.Prepared.serializeBinaryToWriter
    );
  }
  f = message.getIndirectGoal();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.GameEvent.IndirectGoal.serializeBinaryToWriter
    );
  }
  f = message.getChippedGoal();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.GameEvent.ChippedGoal.serializeBinaryToWriter
    );
  }
  f = message.getKickTimeout();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.GameEvent.KickTimeout.serializeBinaryToWriter
    );
  }
  f = message.getAttackerTouchedOpponentInDefenseArea();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.GameEvent.AttackerTouchedOpponentInDefenseArea.serializeBinaryToWriter
    );
  }
  f = message.getAttackerTouchedOpponentInDefenseAreaSkipped();
  if (f != null) {
    writer.writeMessage(
      42,
      f,
      proto.GameEvent.AttackerTouchedOpponentInDefenseArea.serializeBinaryToWriter
    );
  }
  f = message.getBotCrashUniqueSkipped();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.GameEvent.BotCrashUnique.serializeBinaryToWriter
    );
  }
  f = message.getBotPushedBotSkipped();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.GameEvent.BotPushedBot.serializeBinaryToWriter
    );
  }
  f = message.getDefenderInDefenseAreaPartially();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.GameEvent.DefenderInDefenseAreaPartially.serializeBinaryToWriter
    );
  }
  f = message.getMultiplePlacementFailures();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.GameEvent.MultiplePlacementFailures.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.GameEvent.Type = {
  UNKNOWN_GAME_EVENT_TYPE: 0,
  BALL_LEFT_FIELD_TOUCH_LINE: 6,
  BALL_LEFT_FIELD_GOAL_LINE: 7,
  AIMLESS_KICK: 11,
  ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA: 19,
  DEFENDER_IN_DEFENSE_AREA: 31,
  BOUNDARY_CROSSING: 41,
  KEEPER_HELD_BALL: 13,
  BOT_DRIBBLED_BALL_TOO_FAR: 17,
  BOT_PUSHED_BOT: 24,
  BOT_HELD_BALL_DELIBERATELY: 26,
  BOT_TIPPED_OVER: 27,
  ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA: 15,
  BOT_KICKED_BALL_TOO_FAST: 18,
  BOT_CRASH_UNIQUE: 22,
  BOT_CRASH_DRAWN: 21,
  DEFENDER_TOO_CLOSE_TO_KICK_POINT: 29,
  BOT_TOO_FAST_IN_STOP: 28,
  BOT_INTERFERED_PLACEMENT: 20,
  POSSIBLE_GOAL: 39,
  GOAL: 8,
  INVALID_GOAL: 42,
  ATTACKER_DOUBLE_TOUCHED_BALL: 14,
  PLACEMENT_SUCCEEDED: 5,
  PENALTY_KICK_FAILED: 43,
  NO_PROGRESS_IN_GAME: 2,
  PLACEMENT_FAILED: 3,
  MULTIPLE_CARDS: 32,
  MULTIPLE_FOULS: 34,
  BOT_SUBSTITUTION: 37,
  TOO_MANY_ROBOTS: 38,
  CHALLENGE_FLAG: 44,
  EMERGENCY_STOP: 45,
  UNSPORTING_BEHAVIOR_MINOR: 35,
  UNSPORTING_BEHAVIOR_MAJOR: 36,
  PREPARED: 1,
  INDIRECT_GOAL: 9,
  CHIPPED_GOAL: 10,
  KICK_TIMEOUT: 12,
  ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA: 16,
  ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED: 40,
  BOT_CRASH_UNIQUE_SKIPPED: 23,
  BOT_PUSHED_BOT_SKIPPED: 25,
  DEFENDER_IN_DEFENSE_AREA_PARTIALLY: 30,
  MULTIPLE_PLACEMENT_FAILURES: 33
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.BallLeftField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.BallLeftField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.BallLeftField.displayName = 'proto.GameEvent.BallLeftField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.BallLeftField.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.BallLeftField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.BallLeftField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BallLeftField.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.BallLeftField}
 */
proto.GameEvent.BallLeftField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.BallLeftField;
  return proto.GameEvent.BallLeftField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.BallLeftField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.BallLeftField}
 */
proto.GameEvent.BallLeftField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.BallLeftField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.BallLeftField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.BallLeftField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BallLeftField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.BallLeftField.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.BallLeftField.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.BallLeftField.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BallLeftField.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.BallLeftField.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.BallLeftField.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.BallLeftField.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BallLeftField.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BallLeftField.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BallLeftField.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.BallLeftField.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BallLeftField.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.AimlessKick = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.AimlessKick, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.AimlessKick.displayName = 'proto.GameEvent.AimlessKick';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.AimlessKick.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.AimlessKick.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.AimlessKick} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.AimlessKick.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    kickLocation: (f = msg.getKickLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.AimlessKick}
 */
proto.GameEvent.AimlessKick.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.AimlessKick;
  return proto.GameEvent.AimlessKick.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.AimlessKick} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.AimlessKick}
 */
proto.GameEvent.AimlessKick.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setKickLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.AimlessKick.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.AimlessKick.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.AimlessKick} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.AimlessKick.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getKickLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.AimlessKick.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.AimlessKick.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.AimlessKick.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AimlessKick.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.AimlessKick.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.AimlessKick.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.AimlessKick.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AimlessKick.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.AimlessKick.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.AimlessKick.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.AimlessKick.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AimlessKick.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VectorF2D kick_location = 4;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.AimlessKick.prototype.getKickLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 4));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.AimlessKick.prototype.setKickLocation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.GameEvent.AimlessKick.prototype.clearKickLocation = function() {
  this.setKickLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AimlessKick.prototype.hasKickLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.Goal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.Goal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.Goal.displayName = 'proto.GameEvent.Goal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.Goal.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.Goal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.Goal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.Goal.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    kickingTeam: jspb.Message.getField(msg, 6),
    kickingBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    kickLocation: (f = msg.getKickLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    maxBallHeight: jspb.Message.getOptionalFloatingPointField(msg, 5),
    numRobotsByTeam: jspb.Message.getField(msg, 7),
    lastTouchByTeam: jspb.Message.getField(msg, 8),
    message: jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.Goal}
 */
proto.GameEvent.Goal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.Goal;
  return proto.GameEvent.Goal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.Goal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.Goal}
 */
proto.GameEvent.Goal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 6:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setKickingTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKickingBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setKickLocation(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxBallHeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumRobotsByTeam(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastTouchByTeam(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.Goal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.Goal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.Goal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.Goal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getKickLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.Goal.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.Goal.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.Goal.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.Goal.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Team kicking_team = 6;
 * @return {!proto.Team}
 */
proto.GameEvent.Goal.prototype.getKickingTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.Goal.prototype.setKickingTeam = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.GameEvent.Goal.prototype.clearKickingTeam = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.Goal.prototype.hasKickingTeam = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 kicking_bot = 2;
 * @return {number}
 */
proto.GameEvent.Goal.prototype.getKickingBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.Goal.prototype.setKickingBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.Goal.prototype.clearKickingBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.Goal.prototype.hasKickingBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.Goal.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.Goal.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.Goal.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.Goal.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VectorF2D kick_location = 4;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.Goal.prototype.getKickLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 4));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.Goal.prototype.setKickLocation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.GameEvent.Goal.prototype.clearKickLocation = function() {
  this.setKickLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.Goal.prototype.hasKickLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float max_ball_height = 5;
 * @return {number}
 */
proto.GameEvent.Goal.prototype.getMaxBallHeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.GameEvent.Goal.prototype.setMaxBallHeight = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.GameEvent.Goal.prototype.clearMaxBallHeight = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.Goal.prototype.hasMaxBallHeight = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 num_robots_by_team = 7;
 * @return {number}
 */
proto.GameEvent.Goal.prototype.getNumRobotsByTeam = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.GameEvent.Goal.prototype.setNumRobotsByTeam = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.GameEvent.Goal.prototype.clearNumRobotsByTeam = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.Goal.prototype.hasNumRobotsByTeam = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 last_touch_by_team = 8;
 * @return {number}
 */
proto.GameEvent.Goal.prototype.getLastTouchByTeam = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.GameEvent.Goal.prototype.setLastTouchByTeam = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.GameEvent.Goal.prototype.clearLastTouchByTeam = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.Goal.prototype.hasLastTouchByTeam = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string message = 9;
 * @return {string}
 */
proto.GameEvent.Goal.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.GameEvent.Goal.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.GameEvent.Goal.prototype.clearMessage = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.Goal.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.IndirectGoal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.IndirectGoal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.IndirectGoal.displayName = 'proto.GameEvent.IndirectGoal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.IndirectGoal.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.IndirectGoal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.IndirectGoal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.IndirectGoal.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    kickLocation: (f = msg.getKickLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.IndirectGoal}
 */
proto.GameEvent.IndirectGoal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.IndirectGoal;
  return proto.GameEvent.IndirectGoal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.IndirectGoal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.IndirectGoal}
 */
proto.GameEvent.IndirectGoal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setKickLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.IndirectGoal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.IndirectGoal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.IndirectGoal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.IndirectGoal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getKickLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.IndirectGoal.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.IndirectGoal.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.IndirectGoal.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.IndirectGoal.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.IndirectGoal.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.IndirectGoal.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.IndirectGoal.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.IndirectGoal.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.IndirectGoal.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.IndirectGoal.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.IndirectGoal.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.IndirectGoal.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VectorF2D kick_location = 4;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.IndirectGoal.prototype.getKickLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 4));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.IndirectGoal.prototype.setKickLocation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.GameEvent.IndirectGoal.prototype.clearKickLocation = function() {
  this.setKickLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.IndirectGoal.prototype.hasKickLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.ChippedGoal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.ChippedGoal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.ChippedGoal.displayName = 'proto.GameEvent.ChippedGoal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.ChippedGoal.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.ChippedGoal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.ChippedGoal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.ChippedGoal.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    kickLocation: (f = msg.getKickLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    maxBallHeight: jspb.Message.getOptionalFloatingPointField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.ChippedGoal}
 */
proto.GameEvent.ChippedGoal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.ChippedGoal;
  return proto.GameEvent.ChippedGoal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.ChippedGoal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.ChippedGoal}
 */
proto.GameEvent.ChippedGoal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setKickLocation(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxBallHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.ChippedGoal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.ChippedGoal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.ChippedGoal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.ChippedGoal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getKickLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.ChippedGoal.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.ChippedGoal.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.ChippedGoal.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.ChippedGoal.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.ChippedGoal.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.ChippedGoal.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.ChippedGoal.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.ChippedGoal.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.ChippedGoal.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.ChippedGoal.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.ChippedGoal.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.ChippedGoal.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VectorF2D kick_location = 4;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.ChippedGoal.prototype.getKickLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 4));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.ChippedGoal.prototype.setKickLocation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.GameEvent.ChippedGoal.prototype.clearKickLocation = function() {
  this.setKickLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.ChippedGoal.prototype.hasKickLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float max_ball_height = 5;
 * @return {number}
 */
proto.GameEvent.ChippedGoal.prototype.getMaxBallHeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.GameEvent.ChippedGoal.prototype.setMaxBallHeight = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.GameEvent.ChippedGoal.prototype.clearMaxBallHeight = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.ChippedGoal.prototype.hasMaxBallHeight = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.BotTooFastInStop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.BotTooFastInStop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.BotTooFastInStop.displayName = 'proto.GameEvent.BotTooFastInStop';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.BotTooFastInStop.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.BotTooFastInStop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.BotTooFastInStop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotTooFastInStop.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    speed: jspb.Message.getOptionalFloatingPointField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.BotTooFastInStop}
 */
proto.GameEvent.BotTooFastInStop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.BotTooFastInStop;
  return proto.GameEvent.BotTooFastInStop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.BotTooFastInStop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.BotTooFastInStop}
 */
proto.GameEvent.BotTooFastInStop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.BotTooFastInStop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.BotTooFastInStop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.BotTooFastInStop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotTooFastInStop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.BotTooFastInStop.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.BotTooFastInStop.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.BotTooFastInStop.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotTooFastInStop.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.BotTooFastInStop.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.BotTooFastInStop.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.BotTooFastInStop.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotTooFastInStop.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BotTooFastInStop.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BotTooFastInStop.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.BotTooFastInStop.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotTooFastInStop.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float speed = 4;
 * @return {number}
 */
proto.GameEvent.BotTooFastInStop.prototype.getSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GameEvent.BotTooFastInStop.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GameEvent.BotTooFastInStop.prototype.clearSpeed = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotTooFastInStop.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.DefenderTooCloseToKickPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.DefenderTooCloseToKickPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.DefenderTooCloseToKickPoint.displayName = 'proto.GameEvent.DefenderTooCloseToKickPoint';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.DefenderTooCloseToKickPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.DefenderTooCloseToKickPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.DefenderTooCloseToKickPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    distance: jspb.Message.getOptionalFloatingPointField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.DefenderTooCloseToKickPoint}
 */
proto.GameEvent.DefenderTooCloseToKickPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.DefenderTooCloseToKickPoint;
  return proto.GameEvent.DefenderTooCloseToKickPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.DefenderTooCloseToKickPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.DefenderTooCloseToKickPoint}
 */
proto.GameEvent.DefenderTooCloseToKickPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.DefenderTooCloseToKickPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.DefenderTooCloseToKickPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.DefenderTooCloseToKickPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.DefenderTooCloseToKickPoint.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.DefenderTooCloseToKickPoint.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.DefenderTooCloseToKickPoint.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float distance = 4;
 * @return {number}
 */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.getDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GameEvent.DefenderTooCloseToKickPoint.prototype.clearDistance = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderTooCloseToKickPoint.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.BotCrashDrawn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.BotCrashDrawn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.BotCrashDrawn.displayName = 'proto.GameEvent.BotCrashDrawn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.BotCrashDrawn.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.BotCrashDrawn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.BotCrashDrawn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotCrashDrawn.toObject = function(includeInstance, msg) {
  var f, obj = {
    botYellow: jspb.Message.getField(msg, 1),
    botBlue: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    crashSpeed: jspb.Message.getOptionalFloatingPointField(msg, 4),
    speedDiff: jspb.Message.getOptionalFloatingPointField(msg, 5),
    crashAngle: jspb.Message.getOptionalFloatingPointField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.BotCrashDrawn}
 */
proto.GameEvent.BotCrashDrawn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.BotCrashDrawn;
  return proto.GameEvent.BotCrashDrawn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.BotCrashDrawn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.BotCrashDrawn}
 */
proto.GameEvent.BotCrashDrawn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBotYellow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBotBlue(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCrashSpeed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeedDiff(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCrashAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.BotCrashDrawn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.BotCrashDrawn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.BotCrashDrawn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotCrashDrawn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional uint32 bot_yellow = 1;
 * @return {number}
 */
proto.GameEvent.BotCrashDrawn.prototype.getBotYellow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GameEvent.BotCrashDrawn.prototype.setBotYellow = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.BotCrashDrawn.prototype.clearBotYellow = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashDrawn.prototype.hasBotYellow = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 bot_blue = 2;
 * @return {number}
 */
proto.GameEvent.BotCrashDrawn.prototype.getBotBlue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.BotCrashDrawn.prototype.setBotBlue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.BotCrashDrawn.prototype.clearBotBlue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashDrawn.prototype.hasBotBlue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BotCrashDrawn.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BotCrashDrawn.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.BotCrashDrawn.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashDrawn.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float crash_speed = 4;
 * @return {number}
 */
proto.GameEvent.BotCrashDrawn.prototype.getCrashSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GameEvent.BotCrashDrawn.prototype.setCrashSpeed = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GameEvent.BotCrashDrawn.prototype.clearCrashSpeed = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashDrawn.prototype.hasCrashSpeed = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float speed_diff = 5;
 * @return {number}
 */
proto.GameEvent.BotCrashDrawn.prototype.getSpeedDiff = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.GameEvent.BotCrashDrawn.prototype.setSpeedDiff = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.GameEvent.BotCrashDrawn.prototype.clearSpeedDiff = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashDrawn.prototype.hasSpeedDiff = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float crash_angle = 6;
 * @return {number}
 */
proto.GameEvent.BotCrashDrawn.prototype.getCrashAngle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.GameEvent.BotCrashDrawn.prototype.setCrashAngle = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.GameEvent.BotCrashDrawn.prototype.clearCrashAngle = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashDrawn.prototype.hasCrashAngle = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.BotCrashUnique = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.BotCrashUnique, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.BotCrashUnique.displayName = 'proto.GameEvent.BotCrashUnique';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.BotCrashUnique.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.BotCrashUnique.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.BotCrashUnique} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotCrashUnique.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    violator: jspb.Message.getField(msg, 2),
    victim: jspb.Message.getField(msg, 3),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    crashSpeed: jspb.Message.getOptionalFloatingPointField(msg, 5),
    speedDiff: jspb.Message.getOptionalFloatingPointField(msg, 6),
    crashAngle: jspb.Message.getOptionalFloatingPointField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.BotCrashUnique}
 */
proto.GameEvent.BotCrashUnique.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.BotCrashUnique;
  return proto.GameEvent.BotCrashUnique.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.BotCrashUnique} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.BotCrashUnique}
 */
proto.GameEvent.BotCrashUnique.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setViolator(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVictim(value);
      break;
    case 4:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCrashSpeed(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeedDiff(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCrashAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.BotCrashUnique.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.BotCrashUnique.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.BotCrashUnique} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotCrashUnique.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.BotCrashUnique.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.BotCrashUnique.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.BotCrashUnique.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashUnique.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 violator = 2;
 * @return {number}
 */
proto.GameEvent.BotCrashUnique.prototype.getViolator = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.BotCrashUnique.prototype.setViolator = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.BotCrashUnique.prototype.clearViolator = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashUnique.prototype.hasViolator = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 victim = 3;
 * @return {number}
 */
proto.GameEvent.BotCrashUnique.prototype.getVictim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GameEvent.BotCrashUnique.prototype.setVictim = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GameEvent.BotCrashUnique.prototype.clearVictim = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashUnique.prototype.hasVictim = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VectorF2D location = 4;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BotCrashUnique.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 4));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BotCrashUnique.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.GameEvent.BotCrashUnique.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashUnique.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float crash_speed = 5;
 * @return {number}
 */
proto.GameEvent.BotCrashUnique.prototype.getCrashSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.GameEvent.BotCrashUnique.prototype.setCrashSpeed = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.GameEvent.BotCrashUnique.prototype.clearCrashSpeed = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashUnique.prototype.hasCrashSpeed = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float speed_diff = 6;
 * @return {number}
 */
proto.GameEvent.BotCrashUnique.prototype.getSpeedDiff = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.GameEvent.BotCrashUnique.prototype.setSpeedDiff = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.GameEvent.BotCrashUnique.prototype.clearSpeedDiff = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashUnique.prototype.hasSpeedDiff = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float crash_angle = 7;
 * @return {number}
 */
proto.GameEvent.BotCrashUnique.prototype.getCrashAngle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.GameEvent.BotCrashUnique.prototype.setCrashAngle = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.GameEvent.BotCrashUnique.prototype.clearCrashAngle = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotCrashUnique.prototype.hasCrashAngle = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.BotPushedBot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.BotPushedBot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.BotPushedBot.displayName = 'proto.GameEvent.BotPushedBot';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.BotPushedBot.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.BotPushedBot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.BotPushedBot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotPushedBot.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    violator: jspb.Message.getField(msg, 2),
    victim: jspb.Message.getField(msg, 3),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    pushedDistance: jspb.Message.getOptionalFloatingPointField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.BotPushedBot}
 */
proto.GameEvent.BotPushedBot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.BotPushedBot;
  return proto.GameEvent.BotPushedBot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.BotPushedBot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.BotPushedBot}
 */
proto.GameEvent.BotPushedBot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setViolator(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVictim(value);
      break;
    case 4:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPushedDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.BotPushedBot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.BotPushedBot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.BotPushedBot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotPushedBot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.BotPushedBot.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.BotPushedBot.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.BotPushedBot.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotPushedBot.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 violator = 2;
 * @return {number}
 */
proto.GameEvent.BotPushedBot.prototype.getViolator = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.BotPushedBot.prototype.setViolator = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.BotPushedBot.prototype.clearViolator = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotPushedBot.prototype.hasViolator = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 victim = 3;
 * @return {number}
 */
proto.GameEvent.BotPushedBot.prototype.getVictim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GameEvent.BotPushedBot.prototype.setVictim = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GameEvent.BotPushedBot.prototype.clearVictim = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotPushedBot.prototype.hasVictim = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VectorF2D location = 4;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BotPushedBot.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 4));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BotPushedBot.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.GameEvent.BotPushedBot.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotPushedBot.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float pushed_distance = 5;
 * @return {number}
 */
proto.GameEvent.BotPushedBot.prototype.getPushedDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.GameEvent.BotPushedBot.prototype.setPushedDistance = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.GameEvent.BotPushedBot.prototype.clearPushedDistance = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotPushedBot.prototype.hasPushedDistance = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.BotTippedOver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.BotTippedOver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.BotTippedOver.displayName = 'proto.GameEvent.BotTippedOver';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.BotTippedOver.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.BotTippedOver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.BotTippedOver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotTippedOver.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    ballLocation: (f = msg.getBallLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.BotTippedOver}
 */
proto.GameEvent.BotTippedOver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.BotTippedOver;
  return proto.GameEvent.BotTippedOver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.BotTippedOver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.BotTippedOver}
 */
proto.GameEvent.BotTippedOver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setBallLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.BotTippedOver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.BotTippedOver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.BotTippedOver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotTippedOver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getBallLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.BotTippedOver.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.BotTippedOver.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.BotTippedOver.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotTippedOver.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.BotTippedOver.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.BotTippedOver.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.BotTippedOver.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotTippedOver.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BotTippedOver.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BotTippedOver.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.BotTippedOver.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotTippedOver.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VectorF2D ball_location = 4;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BotTippedOver.prototype.getBallLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 4));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BotTippedOver.prototype.setBallLocation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.GameEvent.BotTippedOver.prototype.clearBallLocation = function() {
  this.setBallLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotTippedOver.prototype.hasBallLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.DefenderInDefenseArea = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.DefenderInDefenseArea, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.DefenderInDefenseArea.displayName = 'proto.GameEvent.DefenderInDefenseArea';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.DefenderInDefenseArea.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.DefenderInDefenseArea.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.DefenderInDefenseArea} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.DefenderInDefenseArea.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    distance: jspb.Message.getOptionalFloatingPointField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.DefenderInDefenseArea}
 */
proto.GameEvent.DefenderInDefenseArea.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.DefenderInDefenseArea;
  return proto.GameEvent.DefenderInDefenseArea.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.DefenderInDefenseArea} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.DefenderInDefenseArea}
 */
proto.GameEvent.DefenderInDefenseArea.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.DefenderInDefenseArea.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.DefenderInDefenseArea.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.DefenderInDefenseArea} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.DefenderInDefenseArea.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.DefenderInDefenseArea.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.DefenderInDefenseArea.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.DefenderInDefenseArea.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderInDefenseArea.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.DefenderInDefenseArea.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.DefenderInDefenseArea.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.DefenderInDefenseArea.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderInDefenseArea.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.DefenderInDefenseArea.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.DefenderInDefenseArea.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.DefenderInDefenseArea.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderInDefenseArea.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float distance = 4;
 * @return {number}
 */
proto.GameEvent.DefenderInDefenseArea.prototype.getDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GameEvent.DefenderInDefenseArea.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GameEvent.DefenderInDefenseArea.prototype.clearDistance = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderInDefenseArea.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.DefenderInDefenseAreaPartially = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.DefenderInDefenseAreaPartially, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.DefenderInDefenseAreaPartially.displayName = 'proto.GameEvent.DefenderInDefenseAreaPartially';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.DefenderInDefenseAreaPartially.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.DefenderInDefenseAreaPartially} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.DefenderInDefenseAreaPartially.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    distance: jspb.Message.getOptionalFloatingPointField(msg, 4),
    ballLocation: (f = msg.getBallLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.DefenderInDefenseAreaPartially}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.DefenderInDefenseAreaPartially;
  return proto.GameEvent.DefenderInDefenseAreaPartially.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.DefenderInDefenseAreaPartially} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.DefenderInDefenseAreaPartially}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistance(value);
      break;
    case 5:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setBallLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.DefenderInDefenseAreaPartially.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.DefenderInDefenseAreaPartially} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.DefenderInDefenseAreaPartially.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getBallLocation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.DefenderInDefenseAreaPartially.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.DefenderInDefenseAreaPartially.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.DefenderInDefenseAreaPartially.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float distance = 4;
 * @return {number}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.getDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GameEvent.DefenderInDefenseAreaPartially.prototype.clearDistance = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional VectorF2D ball_location = 5;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.getBallLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 5));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.setBallLocation = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.GameEvent.DefenderInDefenseAreaPartially.prototype.clearBallLocation = function() {
  this.setBallLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.DefenderInDefenseAreaPartially.prototype.hasBallLocation = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.AttackerTouchedBallInDefenseArea, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.AttackerTouchedBallInDefenseArea.displayName = 'proto.GameEvent.AttackerTouchedBallInDefenseArea';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.AttackerTouchedBallInDefenseArea.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.AttackerTouchedBallInDefenseArea} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    distance: jspb.Message.getOptionalFloatingPointField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.AttackerTouchedBallInDefenseArea}
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.AttackerTouchedBallInDefenseArea;
  return proto.GameEvent.AttackerTouchedBallInDefenseArea.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.AttackerTouchedBallInDefenseArea} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.AttackerTouchedBallInDefenseArea}
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.AttackerTouchedBallInDefenseArea.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.AttackerTouchedBallInDefenseArea} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float distance = 4;
 * @return {number}
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.getDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.clearDistance = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTouchedBallInDefenseArea.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.BotKickedBallTooFast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.BotKickedBallTooFast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.BotKickedBallTooFast.displayName = 'proto.GameEvent.BotKickedBallTooFast';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.BotKickedBallTooFast.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.BotKickedBallTooFast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.BotKickedBallTooFast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotKickedBallTooFast.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    initialBallSpeed: jspb.Message.getOptionalFloatingPointField(msg, 4),
    chipped: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.BotKickedBallTooFast}
 */
proto.GameEvent.BotKickedBallTooFast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.BotKickedBallTooFast;
  return proto.GameEvent.BotKickedBallTooFast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.BotKickedBallTooFast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.BotKickedBallTooFast}
 */
proto.GameEvent.BotKickedBallTooFast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInitialBallSpeed(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChipped(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.BotKickedBallTooFast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.BotKickedBallTooFast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.BotKickedBallTooFast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotKickedBallTooFast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.BotKickedBallTooFast.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.BotKickedBallTooFast.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.BotKickedBallTooFast.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotKickedBallTooFast.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.BotKickedBallTooFast.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.BotKickedBallTooFast.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.BotKickedBallTooFast.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotKickedBallTooFast.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BotKickedBallTooFast.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BotKickedBallTooFast.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.BotKickedBallTooFast.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotKickedBallTooFast.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float initial_ball_speed = 4;
 * @return {number}
 */
proto.GameEvent.BotKickedBallTooFast.prototype.getInitialBallSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GameEvent.BotKickedBallTooFast.prototype.setInitialBallSpeed = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GameEvent.BotKickedBallTooFast.prototype.clearInitialBallSpeed = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotKickedBallTooFast.prototype.hasInitialBallSpeed = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool chipped = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GameEvent.BotKickedBallTooFast.prototype.getChipped = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.GameEvent.BotKickedBallTooFast.prototype.setChipped = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.GameEvent.BotKickedBallTooFast.prototype.clearChipped = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotKickedBallTooFast.prototype.hasChipped = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.BotDribbledBallTooFar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.BotDribbledBallTooFar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.BotDribbledBallTooFar.displayName = 'proto.GameEvent.BotDribbledBallTooFar';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.BotDribbledBallTooFar.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.BotDribbledBallTooFar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.BotDribbledBallTooFar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotDribbledBallTooFar.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    start: (f = msg.getStart()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    end: (f = msg.getEnd()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.BotDribbledBallTooFar}
 */
proto.GameEvent.BotDribbledBallTooFar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.BotDribbledBallTooFar;
  return proto.GameEvent.BotDribbledBallTooFar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.BotDribbledBallTooFar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.BotDribbledBallTooFar}
 */
proto.GameEvent.BotDribbledBallTooFar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 4:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.BotDribbledBallTooFar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.BotDribbledBallTooFar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.BotDribbledBallTooFar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotDribbledBallTooFar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = message.getEnd();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.BotDribbledBallTooFar.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.BotDribbledBallTooFar.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.BotDribbledBallTooFar.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotDribbledBallTooFar.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.BotDribbledBallTooFar.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.BotDribbledBallTooFar.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.BotDribbledBallTooFar.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotDribbledBallTooFar.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D start = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BotDribbledBallTooFar.prototype.getStart = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BotDribbledBallTooFar.prototype.setStart = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.BotDribbledBallTooFar.prototype.clearStart = function() {
  this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotDribbledBallTooFar.prototype.hasStart = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VectorF2D end = 4;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BotDribbledBallTooFar.prototype.getEnd = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 4));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BotDribbledBallTooFar.prototype.setEnd = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.GameEvent.BotDribbledBallTooFar.prototype.clearEnd = function() {
  this.setEnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotDribbledBallTooFar.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.AttackerTouchedOpponentInDefenseArea, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.AttackerTouchedOpponentInDefenseArea.displayName = 'proto.GameEvent.AttackerTouchedOpponentInDefenseArea';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.AttackerTouchedOpponentInDefenseArea.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.AttackerTouchedOpponentInDefenseArea} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    victim: jspb.Message.getField(msg, 4),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.AttackerTouchedOpponentInDefenseArea}
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.AttackerTouchedOpponentInDefenseArea;
  return proto.GameEvent.AttackerTouchedOpponentInDefenseArea.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.AttackerTouchedOpponentInDefenseArea} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.AttackerTouchedOpponentInDefenseArea}
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVictim(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.AttackerTouchedOpponentInDefenseArea.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.AttackerTouchedOpponentInDefenseArea} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 victim = 4;
 * @return {number}
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.getVictim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.setVictim = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.clearVictim = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.hasVictim = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTouchedOpponentInDefenseArea.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.AttackerDoubleTouchedBall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.AttackerDoubleTouchedBall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.AttackerDoubleTouchedBall.displayName = 'proto.GameEvent.AttackerDoubleTouchedBall';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.AttackerDoubleTouchedBall.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.AttackerDoubleTouchedBall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.AttackerDoubleTouchedBall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.AttackerDoubleTouchedBall.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.AttackerDoubleTouchedBall}
 */
proto.GameEvent.AttackerDoubleTouchedBall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.AttackerDoubleTouchedBall;
  return proto.GameEvent.AttackerDoubleTouchedBall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.AttackerDoubleTouchedBall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.AttackerDoubleTouchedBall}
 */
proto.GameEvent.AttackerDoubleTouchedBall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.AttackerDoubleTouchedBall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.AttackerDoubleTouchedBall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.AttackerDoubleTouchedBall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.AttackerDoubleTouchedBall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.AttackerDoubleTouchedBall.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.AttackerDoubleTouchedBall.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.AttackerDoubleTouchedBall.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerDoubleTouchedBall.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.AttackerDoubleTouchedBall.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.AttackerDoubleTouchedBall.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.AttackerDoubleTouchedBall.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerDoubleTouchedBall.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.AttackerDoubleTouchedBall.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.AttackerDoubleTouchedBall.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.AttackerDoubleTouchedBall.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerDoubleTouchedBall.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.AttackerTooCloseToDefenseArea = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.AttackerTooCloseToDefenseArea, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.AttackerTooCloseToDefenseArea.displayName = 'proto.GameEvent.AttackerTooCloseToDefenseArea';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.AttackerTooCloseToDefenseArea.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.AttackerTooCloseToDefenseArea} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    distance: jspb.Message.getOptionalFloatingPointField(msg, 4),
    ballLocation: (f = msg.getBallLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.AttackerTooCloseToDefenseArea}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.AttackerTooCloseToDefenseArea;
  return proto.GameEvent.AttackerTooCloseToDefenseArea.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.AttackerTooCloseToDefenseArea} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.AttackerTooCloseToDefenseArea}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistance(value);
      break;
    case 5:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setBallLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.AttackerTooCloseToDefenseArea.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.AttackerTooCloseToDefenseArea} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getBallLocation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float distance = 4;
 * @return {number}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.getDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.clearDistance = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional VectorF2D ball_location = 5;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.getBallLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 5));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.setBallLocation = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.clearBallLocation = function() {
  this.setBallLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.AttackerTooCloseToDefenseArea.prototype.hasBallLocation = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.BotHeldBallDeliberately = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.BotHeldBallDeliberately, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.BotHeldBallDeliberately.displayName = 'proto.GameEvent.BotHeldBallDeliberately';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.BotHeldBallDeliberately.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.BotHeldBallDeliberately.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.BotHeldBallDeliberately} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotHeldBallDeliberately.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    duration: jspb.Message.getOptionalFloatingPointField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.BotHeldBallDeliberately}
 */
proto.GameEvent.BotHeldBallDeliberately.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.BotHeldBallDeliberately;
  return proto.GameEvent.BotHeldBallDeliberately.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.BotHeldBallDeliberately} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.BotHeldBallDeliberately}
 */
proto.GameEvent.BotHeldBallDeliberately.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.BotHeldBallDeliberately.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.BotHeldBallDeliberately.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.BotHeldBallDeliberately} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotHeldBallDeliberately.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.BotHeldBallDeliberately.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.BotHeldBallDeliberately.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.BotHeldBallDeliberately.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotHeldBallDeliberately.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.BotHeldBallDeliberately.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.BotHeldBallDeliberately.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.BotHeldBallDeliberately.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotHeldBallDeliberately.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BotHeldBallDeliberately.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BotHeldBallDeliberately.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.BotHeldBallDeliberately.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotHeldBallDeliberately.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float duration = 4;
 * @return {number}
 */
proto.GameEvent.BotHeldBallDeliberately.prototype.getDuration = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GameEvent.BotHeldBallDeliberately.prototype.setDuration = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GameEvent.BotHeldBallDeliberately.prototype.clearDuration = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotHeldBallDeliberately.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.BotInterferedPlacement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.BotInterferedPlacement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.BotInterferedPlacement.displayName = 'proto.GameEvent.BotInterferedPlacement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.BotInterferedPlacement.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.BotInterferedPlacement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.BotInterferedPlacement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotInterferedPlacement.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    byBot: jspb.Message.getField(msg, 2),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.BotInterferedPlacement}
 */
proto.GameEvent.BotInterferedPlacement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.BotInterferedPlacement;
  return proto.GameEvent.BotInterferedPlacement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.BotInterferedPlacement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.BotInterferedPlacement}
 */
proto.GameEvent.BotInterferedPlacement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setByBot(value);
      break;
    case 3:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.BotInterferedPlacement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.BotInterferedPlacement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.BotInterferedPlacement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotInterferedPlacement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.BotInterferedPlacement.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.BotInterferedPlacement.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.BotInterferedPlacement.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotInterferedPlacement.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 by_bot = 2;
 * @return {number}
 */
proto.GameEvent.BotInterferedPlacement.prototype.getByBot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.BotInterferedPlacement.prototype.setByBot = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.BotInterferedPlacement.prototype.clearByBot = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotInterferedPlacement.prototype.hasByBot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VectorF2D location = 3;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BotInterferedPlacement.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 3));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BotInterferedPlacement.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.GameEvent.BotInterferedPlacement.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotInterferedPlacement.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.MultipleCards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.MultipleCards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.MultipleCards.displayName = 'proto.GameEvent.MultipleCards';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.MultipleCards.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.MultipleCards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.MultipleCards} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.MultipleCards.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.MultipleCards}
 */
proto.GameEvent.MultipleCards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.MultipleCards;
  return proto.GameEvent.MultipleCards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.MultipleCards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.MultipleCards}
 */
proto.GameEvent.MultipleCards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.MultipleCards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.MultipleCards.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.MultipleCards} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.MultipleCards.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.MultipleCards.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.MultipleCards.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.MultipleCards.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.MultipleCards.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.MultipleFouls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.MultipleFouls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.MultipleFouls.displayName = 'proto.GameEvent.MultipleFouls';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.MultipleFouls.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.MultipleFouls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.MultipleFouls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.MultipleFouls.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.MultipleFouls}
 */
proto.GameEvent.MultipleFouls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.MultipleFouls;
  return proto.GameEvent.MultipleFouls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.MultipleFouls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.MultipleFouls}
 */
proto.GameEvent.MultipleFouls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.MultipleFouls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.MultipleFouls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.MultipleFouls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.MultipleFouls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.MultipleFouls.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.MultipleFouls.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.MultipleFouls.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.MultipleFouls.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.MultiplePlacementFailures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.MultiplePlacementFailures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.MultiplePlacementFailures.displayName = 'proto.GameEvent.MultiplePlacementFailures';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.MultiplePlacementFailures.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.MultiplePlacementFailures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.MultiplePlacementFailures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.MultiplePlacementFailures.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.MultiplePlacementFailures}
 */
proto.GameEvent.MultiplePlacementFailures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.MultiplePlacementFailures;
  return proto.GameEvent.MultiplePlacementFailures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.MultiplePlacementFailures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.MultiplePlacementFailures}
 */
proto.GameEvent.MultiplePlacementFailures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.MultiplePlacementFailures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.MultiplePlacementFailures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.MultiplePlacementFailures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.MultiplePlacementFailures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.MultiplePlacementFailures.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.MultiplePlacementFailures.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.MultiplePlacementFailures.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.MultiplePlacementFailures.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.KickTimeout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.KickTimeout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.KickTimeout.displayName = 'proto.GameEvent.KickTimeout';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.KickTimeout.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.KickTimeout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.KickTimeout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.KickTimeout.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    time: jspb.Message.getOptionalFloatingPointField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.KickTimeout}
 */
proto.GameEvent.KickTimeout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.KickTimeout;
  return proto.GameEvent.KickTimeout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.KickTimeout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.KickTimeout}
 */
proto.GameEvent.KickTimeout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.KickTimeout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.KickTimeout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.KickTimeout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.KickTimeout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.KickTimeout.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.KickTimeout.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.KickTimeout.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.KickTimeout.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VectorF2D location = 2;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.KickTimeout.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 2));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.KickTimeout.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GameEvent.KickTimeout.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.KickTimeout.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float time = 3;
 * @return {number}
 */
proto.GameEvent.KickTimeout.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.GameEvent.KickTimeout.prototype.setTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GameEvent.KickTimeout.prototype.clearTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.KickTimeout.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.NoProgressInGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.NoProgressInGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.NoProgressInGame.displayName = 'proto.GameEvent.NoProgressInGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.NoProgressInGame.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.NoProgressInGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.NoProgressInGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.NoProgressInGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    time: jspb.Message.getOptionalFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.NoProgressInGame}
 */
proto.GameEvent.NoProgressInGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.NoProgressInGame;
  return proto.GameEvent.NoProgressInGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.NoProgressInGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.NoProgressInGame}
 */
proto.GameEvent.NoProgressInGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.NoProgressInGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.NoProgressInGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.NoProgressInGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.NoProgressInGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional VectorF2D location = 1;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.NoProgressInGame.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 1));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.NoProgressInGame.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GameEvent.NoProgressInGame.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.NoProgressInGame.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float time = 2;
 * @return {number}
 */
proto.GameEvent.NoProgressInGame.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.GameEvent.NoProgressInGame.prototype.setTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.NoProgressInGame.prototype.clearTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.NoProgressInGame.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.PlacementFailed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.PlacementFailed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.PlacementFailed.displayName = 'proto.GameEvent.PlacementFailed';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.PlacementFailed.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.PlacementFailed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.PlacementFailed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.PlacementFailed.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    remainingDistance: jspb.Message.getOptionalFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.PlacementFailed}
 */
proto.GameEvent.PlacementFailed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.PlacementFailed;
  return proto.GameEvent.PlacementFailed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.PlacementFailed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.PlacementFailed}
 */
proto.GameEvent.PlacementFailed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRemainingDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.PlacementFailed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.PlacementFailed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.PlacementFailed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.PlacementFailed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.PlacementFailed.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.PlacementFailed.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.PlacementFailed.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.PlacementFailed.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float remaining_distance = 2;
 * @return {number}
 */
proto.GameEvent.PlacementFailed.prototype.getRemainingDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.GameEvent.PlacementFailed.prototype.setRemainingDistance = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.PlacementFailed.prototype.clearRemainingDistance = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.PlacementFailed.prototype.hasRemainingDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.UnsportingBehaviorMinor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.UnsportingBehaviorMinor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.UnsportingBehaviorMinor.displayName = 'proto.GameEvent.UnsportingBehaviorMinor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.UnsportingBehaviorMinor.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.UnsportingBehaviorMinor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.UnsportingBehaviorMinor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.UnsportingBehaviorMinor.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    reason: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.UnsportingBehaviorMinor}
 */
proto.GameEvent.UnsportingBehaviorMinor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.UnsportingBehaviorMinor;
  return proto.GameEvent.UnsportingBehaviorMinor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.UnsportingBehaviorMinor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.UnsportingBehaviorMinor}
 */
proto.GameEvent.UnsportingBehaviorMinor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.UnsportingBehaviorMinor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.UnsportingBehaviorMinor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.UnsportingBehaviorMinor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.UnsportingBehaviorMinor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.UnsportingBehaviorMinor.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.UnsportingBehaviorMinor.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.UnsportingBehaviorMinor.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.UnsportingBehaviorMinor.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string reason = 2;
 * @return {string}
 */
proto.GameEvent.UnsportingBehaviorMinor.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GameEvent.UnsportingBehaviorMinor.prototype.setReason = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.UnsportingBehaviorMinor.prototype.clearReason = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.UnsportingBehaviorMinor.prototype.hasReason = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.UnsportingBehaviorMajor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.UnsportingBehaviorMajor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.UnsportingBehaviorMajor.displayName = 'proto.GameEvent.UnsportingBehaviorMajor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.UnsportingBehaviorMajor.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.UnsportingBehaviorMajor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.UnsportingBehaviorMajor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.UnsportingBehaviorMajor.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    reason: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.UnsportingBehaviorMajor}
 */
proto.GameEvent.UnsportingBehaviorMajor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.UnsportingBehaviorMajor;
  return proto.GameEvent.UnsportingBehaviorMajor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.UnsportingBehaviorMajor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.UnsportingBehaviorMajor}
 */
proto.GameEvent.UnsportingBehaviorMajor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.UnsportingBehaviorMajor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.UnsportingBehaviorMajor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.UnsportingBehaviorMajor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.UnsportingBehaviorMajor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.UnsportingBehaviorMajor.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.UnsportingBehaviorMajor.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.UnsportingBehaviorMajor.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.UnsportingBehaviorMajor.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string reason = 2;
 * @return {string}
 */
proto.GameEvent.UnsportingBehaviorMajor.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.GameEvent.UnsportingBehaviorMajor.prototype.setReason = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.UnsportingBehaviorMajor.prototype.clearReason = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.UnsportingBehaviorMajor.prototype.hasReason = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.KeeperHeldBall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.KeeperHeldBall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.KeeperHeldBall.displayName = 'proto.GameEvent.KeeperHeldBall';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.KeeperHeldBall.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.KeeperHeldBall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.KeeperHeldBall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.KeeperHeldBall.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    duration: jspb.Message.getOptionalFloatingPointField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.KeeperHeldBall}
 */
proto.GameEvent.KeeperHeldBall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.KeeperHeldBall;
  return proto.GameEvent.KeeperHeldBall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.KeeperHeldBall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.KeeperHeldBall}
 */
proto.GameEvent.KeeperHeldBall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.KeeperHeldBall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.KeeperHeldBall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.KeeperHeldBall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.KeeperHeldBall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.KeeperHeldBall.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.KeeperHeldBall.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.KeeperHeldBall.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.KeeperHeldBall.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VectorF2D location = 2;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.KeeperHeldBall.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 2));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.KeeperHeldBall.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GameEvent.KeeperHeldBall.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.KeeperHeldBall.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float duration = 3;
 * @return {number}
 */
proto.GameEvent.KeeperHeldBall.prototype.getDuration = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.GameEvent.KeeperHeldBall.prototype.setDuration = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GameEvent.KeeperHeldBall.prototype.clearDuration = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.KeeperHeldBall.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.PlacementSucceeded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.PlacementSucceeded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.PlacementSucceeded.displayName = 'proto.GameEvent.PlacementSucceeded';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.PlacementSucceeded.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.PlacementSucceeded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.PlacementSucceeded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.PlacementSucceeded.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    timeTaken: jspb.Message.getOptionalFloatingPointField(msg, 2),
    precision: jspb.Message.getOptionalFloatingPointField(msg, 3),
    distance: jspb.Message.getOptionalFloatingPointField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.PlacementSucceeded}
 */
proto.GameEvent.PlacementSucceeded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.PlacementSucceeded;
  return proto.GameEvent.PlacementSucceeded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.PlacementSucceeded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.PlacementSucceeded}
 */
proto.GameEvent.PlacementSucceeded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTimeTaken(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrecision(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.PlacementSucceeded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.PlacementSucceeded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.PlacementSucceeded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.PlacementSucceeded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.PlacementSucceeded.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.PlacementSucceeded.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.PlacementSucceeded.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.PlacementSucceeded.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float time_taken = 2;
 * @return {number}
 */
proto.GameEvent.PlacementSucceeded.prototype.getTimeTaken = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.GameEvent.PlacementSucceeded.prototype.setTimeTaken = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.PlacementSucceeded.prototype.clearTimeTaken = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.PlacementSucceeded.prototype.hasTimeTaken = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float precision = 3;
 * @return {number}
 */
proto.GameEvent.PlacementSucceeded.prototype.getPrecision = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.GameEvent.PlacementSucceeded.prototype.setPrecision = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GameEvent.PlacementSucceeded.prototype.clearPrecision = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.PlacementSucceeded.prototype.hasPrecision = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float distance = 4;
 * @return {number}
 */
proto.GameEvent.PlacementSucceeded.prototype.getDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GameEvent.PlacementSucceeded.prototype.setDistance = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.GameEvent.PlacementSucceeded.prototype.clearDistance = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.PlacementSucceeded.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.Prepared = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.Prepared, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.Prepared.displayName = 'proto.GameEvent.Prepared';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.Prepared.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.Prepared.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.Prepared} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.Prepared.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeTaken: jspb.Message.getOptionalFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.Prepared}
 */
proto.GameEvent.Prepared.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.Prepared;
  return proto.GameEvent.Prepared.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.Prepared} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.Prepared}
 */
proto.GameEvent.Prepared.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTimeTaken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.Prepared.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.Prepared.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.Prepared} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.Prepared.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float time_taken = 1;
 * @return {number}
 */
proto.GameEvent.Prepared.prototype.getTimeTaken = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.GameEvent.Prepared.prototype.setTimeTaken = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.Prepared.prototype.clearTimeTaken = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.Prepared.prototype.hasTimeTaken = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.BotSubstitution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.BotSubstitution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.BotSubstitution.displayName = 'proto.GameEvent.BotSubstitution';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.BotSubstitution.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.BotSubstitution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.BotSubstitution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotSubstitution.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.BotSubstitution}
 */
proto.GameEvent.BotSubstitution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.BotSubstitution;
  return proto.GameEvent.BotSubstitution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.BotSubstitution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.BotSubstitution}
 */
proto.GameEvent.BotSubstitution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.BotSubstitution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.BotSubstitution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.BotSubstitution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BotSubstitution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.BotSubstitution.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.BotSubstitution.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.BotSubstitution.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BotSubstitution.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.ChallengeFlag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.ChallengeFlag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.ChallengeFlag.displayName = 'proto.GameEvent.ChallengeFlag';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.ChallengeFlag.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.ChallengeFlag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.ChallengeFlag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.ChallengeFlag.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.ChallengeFlag}
 */
proto.GameEvent.ChallengeFlag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.ChallengeFlag;
  return proto.GameEvent.ChallengeFlag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.ChallengeFlag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.ChallengeFlag}
 */
proto.GameEvent.ChallengeFlag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.ChallengeFlag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.ChallengeFlag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.ChallengeFlag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.ChallengeFlag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.ChallengeFlag.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.ChallengeFlag.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.ChallengeFlag.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.ChallengeFlag.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.EmergencyStop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.EmergencyStop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.EmergencyStop.displayName = 'proto.GameEvent.EmergencyStop';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.EmergencyStop.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.EmergencyStop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.EmergencyStop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.EmergencyStop.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.EmergencyStop}
 */
proto.GameEvent.EmergencyStop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.EmergencyStop;
  return proto.GameEvent.EmergencyStop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.EmergencyStop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.EmergencyStop}
 */
proto.GameEvent.EmergencyStop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.EmergencyStop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.EmergencyStop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.EmergencyStop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.EmergencyStop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.EmergencyStop.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.EmergencyStop.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.EmergencyStop.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.EmergencyStop.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.TooManyRobots = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.TooManyRobots, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.TooManyRobots.displayName = 'proto.GameEvent.TooManyRobots';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.TooManyRobots.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.TooManyRobots.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.TooManyRobots} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.TooManyRobots.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    numRobotsAllowed: jspb.Message.getField(msg, 2),
    numRobotsOnField: jspb.Message.getField(msg, 3),
    ballLocation: (f = msg.getBallLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.TooManyRobots}
 */
proto.GameEvent.TooManyRobots.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.TooManyRobots;
  return proto.GameEvent.TooManyRobots.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.TooManyRobots} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.TooManyRobots}
 */
proto.GameEvent.TooManyRobots.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumRobotsAllowed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumRobotsOnField(value);
      break;
    case 4:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setBallLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.TooManyRobots.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.TooManyRobots.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.TooManyRobots} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.TooManyRobots.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBallLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.TooManyRobots.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.TooManyRobots.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.TooManyRobots.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.TooManyRobots.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 num_robots_allowed = 2;
 * @return {number}
 */
proto.GameEvent.TooManyRobots.prototype.getNumRobotsAllowed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameEvent.TooManyRobots.prototype.setNumRobotsAllowed = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEvent.TooManyRobots.prototype.clearNumRobotsAllowed = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.TooManyRobots.prototype.hasNumRobotsAllowed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 num_robots_on_field = 3;
 * @return {number}
 */
proto.GameEvent.TooManyRobots.prototype.getNumRobotsOnField = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GameEvent.TooManyRobots.prototype.setNumRobotsOnField = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.GameEvent.TooManyRobots.prototype.clearNumRobotsOnField = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.TooManyRobots.prototype.hasNumRobotsOnField = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional VectorF2D ball_location = 4;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.TooManyRobots.prototype.getBallLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 4));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.TooManyRobots.prototype.setBallLocation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.GameEvent.TooManyRobots.prototype.clearBallLocation = function() {
  this.setBallLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.TooManyRobots.prototype.hasBallLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.BoundaryCrossing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.BoundaryCrossing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.BoundaryCrossing.displayName = 'proto.GameEvent.BoundaryCrossing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.BoundaryCrossing.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.BoundaryCrossing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.BoundaryCrossing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BoundaryCrossing.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.BoundaryCrossing}
 */
proto.GameEvent.BoundaryCrossing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.BoundaryCrossing;
  return proto.GameEvent.BoundaryCrossing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.BoundaryCrossing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.BoundaryCrossing}
 */
proto.GameEvent.BoundaryCrossing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.BoundaryCrossing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.BoundaryCrossing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.BoundaryCrossing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.BoundaryCrossing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.BoundaryCrossing.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.BoundaryCrossing.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.BoundaryCrossing.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BoundaryCrossing.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VectorF2D location = 2;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.BoundaryCrossing.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 2));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.BoundaryCrossing.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GameEvent.BoundaryCrossing.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.BoundaryCrossing.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEvent.PenaltyKickFailed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameEvent.PenaltyKickFailed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEvent.PenaltyKickFailed.displayName = 'proto.GameEvent.PenaltyKickFailed';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEvent.PenaltyKickFailed.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEvent.PenaltyKickFailed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEvent.PenaltyKickFailed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.PenaltyKickFailed.toObject = function(includeInstance, msg) {
  var f, obj = {
    byTeam: jspb.Message.getField(msg, 1),
    location: (f = msg.getLocation()) && Common_pb.VectorF2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEvent.PenaltyKickFailed}
 */
proto.GameEvent.PenaltyKickFailed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEvent.PenaltyKickFailed;
  return proto.GameEvent.PenaltyKickFailed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEvent.PenaltyKickFailed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEvent.PenaltyKickFailed}
 */
proto.GameEvent.PenaltyKickFailed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Team} */ (reader.readEnum());
      msg.setByTeam(value);
      break;
    case 2:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEvent.PenaltyKickFailed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEvent.PenaltyKickFailed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEvent.PenaltyKickFailed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEvent.PenaltyKickFailed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Team} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
};


/**
 * required Team by_team = 1;
 * @return {!proto.Team}
 */
proto.GameEvent.PenaltyKickFailed.prototype.getByTeam = function() {
  return /** @type {!proto.Team} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Team} value */
proto.GameEvent.PenaltyKickFailed.prototype.setByTeam = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.GameEvent.PenaltyKickFailed.prototype.clearByTeam = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.PenaltyKickFailed.prototype.hasByTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VectorF2D location = 2;
 * @return {?proto.VectorF2D}
 */
proto.GameEvent.PenaltyKickFailed.prototype.getLocation = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 2));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.GameEvent.PenaltyKickFailed.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GameEvent.PenaltyKickFailed.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.PenaltyKickFailed.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Type type = 40;
 * @return {!proto.GameEvent.Type}
 */
proto.GameEvent.prototype.getType = function() {
  return /** @type {!proto.GameEvent.Type} */ (jspb.Message.getFieldWithDefault(this, 40, 0));
};


/** @param {!proto.GameEvent.Type} value */
proto.GameEvent.prototype.setType = function(value) {
  jspb.Message.setField(this, 40, value);
};


proto.GameEvent.prototype.clearType = function() {
  jspb.Message.setField(this, 40, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasType = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * repeated string origin = 41;
 * @return {!Array<string>}
 */
proto.GameEvent.prototype.getOriginList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 41));
};


/** @param {!Array<string>} value */
proto.GameEvent.prototype.setOriginList = function(value) {
  jspb.Message.setField(this, 41, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.GameEvent.prototype.addOrigin = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 41, value, opt_index);
};


proto.GameEvent.prototype.clearOriginList = function() {
  this.setOriginList([]);
};


/**
 * optional BallLeftField ball_left_field_touch_line = 6;
 * @return {?proto.GameEvent.BallLeftField}
 */
proto.GameEvent.prototype.getBallLeftFieldTouchLine = function() {
  return /** @type{?proto.GameEvent.BallLeftField} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BallLeftField, 6));
};


/** @param {?proto.GameEvent.BallLeftField|undefined} value */
proto.GameEvent.prototype.setBallLeftFieldTouchLine = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBallLeftFieldTouchLine = function() {
  this.setBallLeftFieldTouchLine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBallLeftFieldTouchLine = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional BallLeftField ball_left_field_goal_line = 7;
 * @return {?proto.GameEvent.BallLeftField}
 */
proto.GameEvent.prototype.getBallLeftFieldGoalLine = function() {
  return /** @type{?proto.GameEvent.BallLeftField} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BallLeftField, 7));
};


/** @param {?proto.GameEvent.BallLeftField|undefined} value */
proto.GameEvent.prototype.setBallLeftFieldGoalLine = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBallLeftFieldGoalLine = function() {
  this.setBallLeftFieldGoalLine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBallLeftFieldGoalLine = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional AimlessKick aimless_kick = 11;
 * @return {?proto.GameEvent.AimlessKick}
 */
proto.GameEvent.prototype.getAimlessKick = function() {
  return /** @type{?proto.GameEvent.AimlessKick} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.AimlessKick, 11));
};


/** @param {?proto.GameEvent.AimlessKick|undefined} value */
proto.GameEvent.prototype.setAimlessKick = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearAimlessKick = function() {
  this.setAimlessKick(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasAimlessKick = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
 * @return {?proto.GameEvent.AttackerTooCloseToDefenseArea}
 */
proto.GameEvent.prototype.getAttackerTooCloseToDefenseArea = function() {
  return /** @type{?proto.GameEvent.AttackerTooCloseToDefenseArea} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.AttackerTooCloseToDefenseArea, 19));
};


/** @param {?proto.GameEvent.AttackerTooCloseToDefenseArea|undefined} value */
proto.GameEvent.prototype.setAttackerTooCloseToDefenseArea = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearAttackerTooCloseToDefenseArea = function() {
  this.setAttackerTooCloseToDefenseArea(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasAttackerTooCloseToDefenseArea = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional DefenderInDefenseArea defender_in_defense_area = 31;
 * @return {?proto.GameEvent.DefenderInDefenseArea}
 */
proto.GameEvent.prototype.getDefenderInDefenseArea = function() {
  return /** @type{?proto.GameEvent.DefenderInDefenseArea} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.DefenderInDefenseArea, 31));
};


/** @param {?proto.GameEvent.DefenderInDefenseArea|undefined} value */
proto.GameEvent.prototype.setDefenderInDefenseArea = function(value) {
  jspb.Message.setOneofWrapperField(this, 31, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearDefenderInDefenseArea = function() {
  this.setDefenderInDefenseArea(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasDefenderInDefenseArea = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional BoundaryCrossing boundary_crossing = 43;
 * @return {?proto.GameEvent.BoundaryCrossing}
 */
proto.GameEvent.prototype.getBoundaryCrossing = function() {
  return /** @type{?proto.GameEvent.BoundaryCrossing} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BoundaryCrossing, 43));
};


/** @param {?proto.GameEvent.BoundaryCrossing|undefined} value */
proto.GameEvent.prototype.setBoundaryCrossing = function(value) {
  jspb.Message.setOneofWrapperField(this, 43, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBoundaryCrossing = function() {
  this.setBoundaryCrossing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBoundaryCrossing = function() {
  return jspb.Message.getField(this, 43) != null;
};


/**
 * optional KeeperHeldBall keeper_held_ball = 13;
 * @return {?proto.GameEvent.KeeperHeldBall}
 */
proto.GameEvent.prototype.getKeeperHeldBall = function() {
  return /** @type{?proto.GameEvent.KeeperHeldBall} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.KeeperHeldBall, 13));
};


/** @param {?proto.GameEvent.KeeperHeldBall|undefined} value */
proto.GameEvent.prototype.setKeeperHeldBall = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearKeeperHeldBall = function() {
  this.setKeeperHeldBall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasKeeperHeldBall = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
 * @return {?proto.GameEvent.BotDribbledBallTooFar}
 */
proto.GameEvent.prototype.getBotDribbledBallTooFar = function() {
  return /** @type{?proto.GameEvent.BotDribbledBallTooFar} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BotDribbledBallTooFar, 17));
};


/** @param {?proto.GameEvent.BotDribbledBallTooFar|undefined} value */
proto.GameEvent.prototype.setBotDribbledBallTooFar = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBotDribbledBallTooFar = function() {
  this.setBotDribbledBallTooFar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBotDribbledBallTooFar = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional BotPushedBot bot_pushed_bot = 24;
 * @return {?proto.GameEvent.BotPushedBot}
 */
proto.GameEvent.prototype.getBotPushedBot = function() {
  return /** @type{?proto.GameEvent.BotPushedBot} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BotPushedBot, 24));
};


/** @param {?proto.GameEvent.BotPushedBot|undefined} value */
proto.GameEvent.prototype.setBotPushedBot = function(value) {
  jspb.Message.setOneofWrapperField(this, 24, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBotPushedBot = function() {
  this.setBotPushedBot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBotPushedBot = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional BotHeldBallDeliberately bot_held_ball_deliberately = 26;
 * @return {?proto.GameEvent.BotHeldBallDeliberately}
 */
proto.GameEvent.prototype.getBotHeldBallDeliberately = function() {
  return /** @type{?proto.GameEvent.BotHeldBallDeliberately} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BotHeldBallDeliberately, 26));
};


/** @param {?proto.GameEvent.BotHeldBallDeliberately|undefined} value */
proto.GameEvent.prototype.setBotHeldBallDeliberately = function(value) {
  jspb.Message.setOneofWrapperField(this, 26, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBotHeldBallDeliberately = function() {
  this.setBotHeldBallDeliberately(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBotHeldBallDeliberately = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional BotTippedOver bot_tipped_over = 27;
 * @return {?proto.GameEvent.BotTippedOver}
 */
proto.GameEvent.prototype.getBotTippedOver = function() {
  return /** @type{?proto.GameEvent.BotTippedOver} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BotTippedOver, 27));
};


/** @param {?proto.GameEvent.BotTippedOver|undefined} value */
proto.GameEvent.prototype.setBotTippedOver = function(value) {
  jspb.Message.setOneofWrapperField(this, 27, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBotTippedOver = function() {
  this.setBotTippedOver(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBotTippedOver = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
 * @return {?proto.GameEvent.AttackerTouchedBallInDefenseArea}
 */
proto.GameEvent.prototype.getAttackerTouchedBallInDefenseArea = function() {
  return /** @type{?proto.GameEvent.AttackerTouchedBallInDefenseArea} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.AttackerTouchedBallInDefenseArea, 15));
};


/** @param {?proto.GameEvent.AttackerTouchedBallInDefenseArea|undefined} value */
proto.GameEvent.prototype.setAttackerTouchedBallInDefenseArea = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearAttackerTouchedBallInDefenseArea = function() {
  this.setAttackerTouchedBallInDefenseArea(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasAttackerTouchedBallInDefenseArea = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
 * @return {?proto.GameEvent.BotKickedBallTooFast}
 */
proto.GameEvent.prototype.getBotKickedBallTooFast = function() {
  return /** @type{?proto.GameEvent.BotKickedBallTooFast} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BotKickedBallTooFast, 18));
};


/** @param {?proto.GameEvent.BotKickedBallTooFast|undefined} value */
proto.GameEvent.prototype.setBotKickedBallTooFast = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBotKickedBallTooFast = function() {
  this.setBotKickedBallTooFast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBotKickedBallTooFast = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional BotCrashUnique bot_crash_unique = 22;
 * @return {?proto.GameEvent.BotCrashUnique}
 */
proto.GameEvent.prototype.getBotCrashUnique = function() {
  return /** @type{?proto.GameEvent.BotCrashUnique} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BotCrashUnique, 22));
};


/** @param {?proto.GameEvent.BotCrashUnique|undefined} value */
proto.GameEvent.prototype.setBotCrashUnique = function(value) {
  jspb.Message.setOneofWrapperField(this, 22, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBotCrashUnique = function() {
  this.setBotCrashUnique(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBotCrashUnique = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional BotCrashDrawn bot_crash_drawn = 21;
 * @return {?proto.GameEvent.BotCrashDrawn}
 */
proto.GameEvent.prototype.getBotCrashDrawn = function() {
  return /** @type{?proto.GameEvent.BotCrashDrawn} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BotCrashDrawn, 21));
};


/** @param {?proto.GameEvent.BotCrashDrawn|undefined} value */
proto.GameEvent.prototype.setBotCrashDrawn = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBotCrashDrawn = function() {
  this.setBotCrashDrawn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBotCrashDrawn = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
 * @return {?proto.GameEvent.DefenderTooCloseToKickPoint}
 */
proto.GameEvent.prototype.getDefenderTooCloseToKickPoint = function() {
  return /** @type{?proto.GameEvent.DefenderTooCloseToKickPoint} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.DefenderTooCloseToKickPoint, 29));
};


/** @param {?proto.GameEvent.DefenderTooCloseToKickPoint|undefined} value */
proto.GameEvent.prototype.setDefenderTooCloseToKickPoint = function(value) {
  jspb.Message.setOneofWrapperField(this, 29, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearDefenderTooCloseToKickPoint = function() {
  this.setDefenderTooCloseToKickPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasDefenderTooCloseToKickPoint = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional BotTooFastInStop bot_too_fast_in_stop = 28;
 * @return {?proto.GameEvent.BotTooFastInStop}
 */
proto.GameEvent.prototype.getBotTooFastInStop = function() {
  return /** @type{?proto.GameEvent.BotTooFastInStop} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BotTooFastInStop, 28));
};


/** @param {?proto.GameEvent.BotTooFastInStop|undefined} value */
proto.GameEvent.prototype.setBotTooFastInStop = function(value) {
  jspb.Message.setOneofWrapperField(this, 28, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBotTooFastInStop = function() {
  this.setBotTooFastInStop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBotTooFastInStop = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional BotInterferedPlacement bot_interfered_placement = 20;
 * @return {?proto.GameEvent.BotInterferedPlacement}
 */
proto.GameEvent.prototype.getBotInterferedPlacement = function() {
  return /** @type{?proto.GameEvent.BotInterferedPlacement} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BotInterferedPlacement, 20));
};


/** @param {?proto.GameEvent.BotInterferedPlacement|undefined} value */
proto.GameEvent.prototype.setBotInterferedPlacement = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBotInterferedPlacement = function() {
  this.setBotInterferedPlacement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBotInterferedPlacement = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional Goal possible_goal = 39;
 * @return {?proto.GameEvent.Goal}
 */
proto.GameEvent.prototype.getPossibleGoal = function() {
  return /** @type{?proto.GameEvent.Goal} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.Goal, 39));
};


/** @param {?proto.GameEvent.Goal|undefined} value */
proto.GameEvent.prototype.setPossibleGoal = function(value) {
  jspb.Message.setOneofWrapperField(this, 39, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearPossibleGoal = function() {
  this.setPossibleGoal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasPossibleGoal = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional Goal goal = 8;
 * @return {?proto.GameEvent.Goal}
 */
proto.GameEvent.prototype.getGoal = function() {
  return /** @type{?proto.GameEvent.Goal} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.Goal, 8));
};


/** @param {?proto.GameEvent.Goal|undefined} value */
proto.GameEvent.prototype.setGoal = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearGoal = function() {
  this.setGoal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasGoal = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Goal invalid_goal = 44;
 * @return {?proto.GameEvent.Goal}
 */
proto.GameEvent.prototype.getInvalidGoal = function() {
  return /** @type{?proto.GameEvent.Goal} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.Goal, 44));
};


/** @param {?proto.GameEvent.Goal|undefined} value */
proto.GameEvent.prototype.setInvalidGoal = function(value) {
  jspb.Message.setOneofWrapperField(this, 44, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearInvalidGoal = function() {
  this.setInvalidGoal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasInvalidGoal = function() {
  return jspb.Message.getField(this, 44) != null;
};


/**
 * optional AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
 * @return {?proto.GameEvent.AttackerDoubleTouchedBall}
 */
proto.GameEvent.prototype.getAttackerDoubleTouchedBall = function() {
  return /** @type{?proto.GameEvent.AttackerDoubleTouchedBall} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.AttackerDoubleTouchedBall, 14));
};


/** @param {?proto.GameEvent.AttackerDoubleTouchedBall|undefined} value */
proto.GameEvent.prototype.setAttackerDoubleTouchedBall = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearAttackerDoubleTouchedBall = function() {
  this.setAttackerDoubleTouchedBall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasAttackerDoubleTouchedBall = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional PlacementSucceeded placement_succeeded = 5;
 * @return {?proto.GameEvent.PlacementSucceeded}
 */
proto.GameEvent.prototype.getPlacementSucceeded = function() {
  return /** @type{?proto.GameEvent.PlacementSucceeded} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.PlacementSucceeded, 5));
};


/** @param {?proto.GameEvent.PlacementSucceeded|undefined} value */
proto.GameEvent.prototype.setPlacementSucceeded = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearPlacementSucceeded = function() {
  this.setPlacementSucceeded(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasPlacementSucceeded = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PenaltyKickFailed penalty_kick_failed = 45;
 * @return {?proto.GameEvent.PenaltyKickFailed}
 */
proto.GameEvent.prototype.getPenaltyKickFailed = function() {
  return /** @type{?proto.GameEvent.PenaltyKickFailed} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.PenaltyKickFailed, 45));
};


/** @param {?proto.GameEvent.PenaltyKickFailed|undefined} value */
proto.GameEvent.prototype.setPenaltyKickFailed = function(value) {
  jspb.Message.setOneofWrapperField(this, 45, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearPenaltyKickFailed = function() {
  this.setPenaltyKickFailed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasPenaltyKickFailed = function() {
  return jspb.Message.getField(this, 45) != null;
};


/**
 * optional NoProgressInGame no_progress_in_game = 2;
 * @return {?proto.GameEvent.NoProgressInGame}
 */
proto.GameEvent.prototype.getNoProgressInGame = function() {
  return /** @type{?proto.GameEvent.NoProgressInGame} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.NoProgressInGame, 2));
};


/** @param {?proto.GameEvent.NoProgressInGame|undefined} value */
proto.GameEvent.prototype.setNoProgressInGame = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearNoProgressInGame = function() {
  this.setNoProgressInGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasNoProgressInGame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PlacementFailed placement_failed = 3;
 * @return {?proto.GameEvent.PlacementFailed}
 */
proto.GameEvent.prototype.getPlacementFailed = function() {
  return /** @type{?proto.GameEvent.PlacementFailed} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.PlacementFailed, 3));
};


/** @param {?proto.GameEvent.PlacementFailed|undefined} value */
proto.GameEvent.prototype.setPlacementFailed = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearPlacementFailed = function() {
  this.setPlacementFailed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasPlacementFailed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MultipleCards multiple_cards = 32;
 * @return {?proto.GameEvent.MultipleCards}
 */
proto.GameEvent.prototype.getMultipleCards = function() {
  return /** @type{?proto.GameEvent.MultipleCards} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.MultipleCards, 32));
};


/** @param {?proto.GameEvent.MultipleCards|undefined} value */
proto.GameEvent.prototype.setMultipleCards = function(value) {
  jspb.Message.setOneofWrapperField(this, 32, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearMultipleCards = function() {
  this.setMultipleCards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasMultipleCards = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional MultipleFouls multiple_fouls = 34;
 * @return {?proto.GameEvent.MultipleFouls}
 */
proto.GameEvent.prototype.getMultipleFouls = function() {
  return /** @type{?proto.GameEvent.MultipleFouls} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.MultipleFouls, 34));
};


/** @param {?proto.GameEvent.MultipleFouls|undefined} value */
proto.GameEvent.prototype.setMultipleFouls = function(value) {
  jspb.Message.setOneofWrapperField(this, 34, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearMultipleFouls = function() {
  this.setMultipleFouls(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasMultipleFouls = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional BotSubstitution bot_substitution = 37;
 * @return {?proto.GameEvent.BotSubstitution}
 */
proto.GameEvent.prototype.getBotSubstitution = function() {
  return /** @type{?proto.GameEvent.BotSubstitution} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BotSubstitution, 37));
};


/** @param {?proto.GameEvent.BotSubstitution|undefined} value */
proto.GameEvent.prototype.setBotSubstitution = function(value) {
  jspb.Message.setOneofWrapperField(this, 37, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBotSubstitution = function() {
  this.setBotSubstitution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBotSubstitution = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional TooManyRobots too_many_robots = 38;
 * @return {?proto.GameEvent.TooManyRobots}
 */
proto.GameEvent.prototype.getTooManyRobots = function() {
  return /** @type{?proto.GameEvent.TooManyRobots} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.TooManyRobots, 38));
};


/** @param {?proto.GameEvent.TooManyRobots|undefined} value */
proto.GameEvent.prototype.setTooManyRobots = function(value) {
  jspb.Message.setOneofWrapperField(this, 38, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearTooManyRobots = function() {
  this.setTooManyRobots(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasTooManyRobots = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional ChallengeFlag challenge_flag = 46;
 * @return {?proto.GameEvent.ChallengeFlag}
 */
proto.GameEvent.prototype.getChallengeFlag = function() {
  return /** @type{?proto.GameEvent.ChallengeFlag} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.ChallengeFlag, 46));
};


/** @param {?proto.GameEvent.ChallengeFlag|undefined} value */
proto.GameEvent.prototype.setChallengeFlag = function(value) {
  jspb.Message.setOneofWrapperField(this, 46, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearChallengeFlag = function() {
  this.setChallengeFlag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasChallengeFlag = function() {
  return jspb.Message.getField(this, 46) != null;
};


/**
 * optional EmergencyStop emergency_stop = 47;
 * @return {?proto.GameEvent.EmergencyStop}
 */
proto.GameEvent.prototype.getEmergencyStop = function() {
  return /** @type{?proto.GameEvent.EmergencyStop} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.EmergencyStop, 47));
};


/** @param {?proto.GameEvent.EmergencyStop|undefined} value */
proto.GameEvent.prototype.setEmergencyStop = function(value) {
  jspb.Message.setOneofWrapperField(this, 47, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearEmergencyStop = function() {
  this.setEmergencyStop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasEmergencyStop = function() {
  return jspb.Message.getField(this, 47) != null;
};


/**
 * optional UnsportingBehaviorMinor unsporting_behavior_minor = 35;
 * @return {?proto.GameEvent.UnsportingBehaviorMinor}
 */
proto.GameEvent.prototype.getUnsportingBehaviorMinor = function() {
  return /** @type{?proto.GameEvent.UnsportingBehaviorMinor} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.UnsportingBehaviorMinor, 35));
};


/** @param {?proto.GameEvent.UnsportingBehaviorMinor|undefined} value */
proto.GameEvent.prototype.setUnsportingBehaviorMinor = function(value) {
  jspb.Message.setOneofWrapperField(this, 35, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearUnsportingBehaviorMinor = function() {
  this.setUnsportingBehaviorMinor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasUnsportingBehaviorMinor = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional UnsportingBehaviorMajor unsporting_behavior_major = 36;
 * @return {?proto.GameEvent.UnsportingBehaviorMajor}
 */
proto.GameEvent.prototype.getUnsportingBehaviorMajor = function() {
  return /** @type{?proto.GameEvent.UnsportingBehaviorMajor} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.UnsportingBehaviorMajor, 36));
};


/** @param {?proto.GameEvent.UnsportingBehaviorMajor|undefined} value */
proto.GameEvent.prototype.setUnsportingBehaviorMajor = function(value) {
  jspb.Message.setOneofWrapperField(this, 36, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearUnsportingBehaviorMajor = function() {
  this.setUnsportingBehaviorMajor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasUnsportingBehaviorMajor = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional Prepared prepared = 1;
 * @return {?proto.GameEvent.Prepared}
 */
proto.GameEvent.prototype.getPrepared = function() {
  return /** @type{?proto.GameEvent.Prepared} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.Prepared, 1));
};


/** @param {?proto.GameEvent.Prepared|undefined} value */
proto.GameEvent.prototype.setPrepared = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearPrepared = function() {
  this.setPrepared(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasPrepared = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IndirectGoal indirect_goal = 9;
 * @return {?proto.GameEvent.IndirectGoal}
 */
proto.GameEvent.prototype.getIndirectGoal = function() {
  return /** @type{?proto.GameEvent.IndirectGoal} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.IndirectGoal, 9));
};


/** @param {?proto.GameEvent.IndirectGoal|undefined} value */
proto.GameEvent.prototype.setIndirectGoal = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearIndirectGoal = function() {
  this.setIndirectGoal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasIndirectGoal = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ChippedGoal chipped_goal = 10;
 * @return {?proto.GameEvent.ChippedGoal}
 */
proto.GameEvent.prototype.getChippedGoal = function() {
  return /** @type{?proto.GameEvent.ChippedGoal} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.ChippedGoal, 10));
};


/** @param {?proto.GameEvent.ChippedGoal|undefined} value */
proto.GameEvent.prototype.setChippedGoal = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearChippedGoal = function() {
  this.setChippedGoal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasChippedGoal = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional KickTimeout kick_timeout = 12;
 * @return {?proto.GameEvent.KickTimeout}
 */
proto.GameEvent.prototype.getKickTimeout = function() {
  return /** @type{?proto.GameEvent.KickTimeout} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.KickTimeout, 12));
};


/** @param {?proto.GameEvent.KickTimeout|undefined} value */
proto.GameEvent.prototype.setKickTimeout = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearKickTimeout = function() {
  this.setKickTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasKickTimeout = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16;
 * @return {?proto.GameEvent.AttackerTouchedOpponentInDefenseArea}
 */
proto.GameEvent.prototype.getAttackerTouchedOpponentInDefenseArea = function() {
  return /** @type{?proto.GameEvent.AttackerTouchedOpponentInDefenseArea} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.AttackerTouchedOpponentInDefenseArea, 16));
};


/** @param {?proto.GameEvent.AttackerTouchedOpponentInDefenseArea|undefined} value */
proto.GameEvent.prototype.setAttackerTouchedOpponentInDefenseArea = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearAttackerTouchedOpponentInDefenseArea = function() {
  this.setAttackerTouchedOpponentInDefenseArea(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasAttackerTouchedOpponentInDefenseArea = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42;
 * @return {?proto.GameEvent.AttackerTouchedOpponentInDefenseArea}
 */
proto.GameEvent.prototype.getAttackerTouchedOpponentInDefenseAreaSkipped = function() {
  return /** @type{?proto.GameEvent.AttackerTouchedOpponentInDefenseArea} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.AttackerTouchedOpponentInDefenseArea, 42));
};


/** @param {?proto.GameEvent.AttackerTouchedOpponentInDefenseArea|undefined} value */
proto.GameEvent.prototype.setAttackerTouchedOpponentInDefenseAreaSkipped = function(value) {
  jspb.Message.setOneofWrapperField(this, 42, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearAttackerTouchedOpponentInDefenseAreaSkipped = function() {
  this.setAttackerTouchedOpponentInDefenseAreaSkipped(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasAttackerTouchedOpponentInDefenseAreaSkipped = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional BotCrashUnique bot_crash_unique_skipped = 23;
 * @return {?proto.GameEvent.BotCrashUnique}
 */
proto.GameEvent.prototype.getBotCrashUniqueSkipped = function() {
  return /** @type{?proto.GameEvent.BotCrashUnique} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BotCrashUnique, 23));
};


/** @param {?proto.GameEvent.BotCrashUnique|undefined} value */
proto.GameEvent.prototype.setBotCrashUniqueSkipped = function(value) {
  jspb.Message.setOneofWrapperField(this, 23, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBotCrashUniqueSkipped = function() {
  this.setBotCrashUniqueSkipped(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBotCrashUniqueSkipped = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional BotPushedBot bot_pushed_bot_skipped = 25;
 * @return {?proto.GameEvent.BotPushedBot}
 */
proto.GameEvent.prototype.getBotPushedBotSkipped = function() {
  return /** @type{?proto.GameEvent.BotPushedBot} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.BotPushedBot, 25));
};


/** @param {?proto.GameEvent.BotPushedBot|undefined} value */
proto.GameEvent.prototype.setBotPushedBotSkipped = function(value) {
  jspb.Message.setOneofWrapperField(this, 25, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearBotPushedBotSkipped = function() {
  this.setBotPushedBotSkipped(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasBotPushedBotSkipped = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30;
 * @return {?proto.GameEvent.DefenderInDefenseAreaPartially}
 */
proto.GameEvent.prototype.getDefenderInDefenseAreaPartially = function() {
  return /** @type{?proto.GameEvent.DefenderInDefenseAreaPartially} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.DefenderInDefenseAreaPartially, 30));
};


/** @param {?proto.GameEvent.DefenderInDefenseAreaPartially|undefined} value */
proto.GameEvent.prototype.setDefenderInDefenseAreaPartially = function(value) {
  jspb.Message.setOneofWrapperField(this, 30, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearDefenderInDefenseAreaPartially = function() {
  this.setDefenderInDefenseAreaPartially(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasDefenderInDefenseAreaPartially = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional MultiplePlacementFailures multiple_placement_failures = 33;
 * @return {?proto.GameEvent.MultiplePlacementFailures}
 */
proto.GameEvent.prototype.getMultiplePlacementFailures = function() {
  return /** @type{?proto.GameEvent.MultiplePlacementFailures} */ (
    jspb.Message.getWrapperField(this, proto.GameEvent.MultiplePlacementFailures, 33));
};


/** @param {?proto.GameEvent.MultiplePlacementFailures|undefined} value */
proto.GameEvent.prototype.setMultiplePlacementFailures = function(value) {
  jspb.Message.setOneofWrapperField(this, 33, proto.GameEvent.oneofGroups_[0], value);
};


proto.GameEvent.prototype.clearMultiplePlacementFailures = function() {
  this.setMultiplePlacementFailures(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEvent.prototype.hasMultiplePlacementFailures = function() {
  return jspb.Message.getField(this, 33) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Referee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Referee.repeatedFields_, null);
};
goog.inherits(proto.Referee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Referee.displayName = 'proto.Referee';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Referee.repeatedFields_ = [16,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Referee.prototype.toObject = function(opt_includeInstance) {
  return proto.Referee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Referee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Referee.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetTimestamp: jspb.Message.getField(msg, 1),
    stage: jspb.Message.getField(msg, 2),
    stageTimeLeft: jspb.Message.getField(msg, 3),
    command: jspb.Message.getField(msg, 4),
    commandCounter: jspb.Message.getField(msg, 5),
    commandTimestamp: jspb.Message.getField(msg, 6),
    yellow: (f = msg.getYellow()) && proto.Referee.TeamInfo.toObject(includeInstance, f),
    blue: (f = msg.getBlue()) && proto.Referee.TeamInfo.toObject(includeInstance, f),
    designatedPosition: (f = msg.getDesignatedPosition()) && Common_pb.VectorF2D.toObject(includeInstance, f),
    blueTeamOnPositiveHalf: jspb.Message.getField(msg, 10),
    nextCommand: jspb.Message.getField(msg, 12),
    gameEventsList: jspb.Message.toObjectList(msg.getGameEventsList(),
    proto.GameEvent.toObject, includeInstance),
    gameEventProposalsList: jspb.Message.toObjectList(msg.getGameEventProposalsList(),
    proto.GameEventProposalGroup.toObject, includeInstance),
    currentActionTimeRemaining: jspb.Message.getField(msg, 15)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Referee}
 */
proto.Referee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Referee;
  return proto.Referee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Referee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Referee}
 */
proto.Referee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPacketTimestamp(value);
      break;
    case 2:
      var value = /** @type {!proto.Referee.Stage} */ (reader.readEnum());
      msg.setStage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setStageTimeLeft(value);
      break;
    case 4:
      var value = /** @type {!proto.Referee.Command} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommandCounter(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCommandTimestamp(value);
      break;
    case 7:
      var value = new proto.Referee.TeamInfo;
      reader.readMessage(value,proto.Referee.TeamInfo.deserializeBinaryFromReader);
      msg.setYellow(value);
      break;
    case 8:
      var value = new proto.Referee.TeamInfo;
      reader.readMessage(value,proto.Referee.TeamInfo.deserializeBinaryFromReader);
      msg.setBlue(value);
      break;
    case 9:
      var value = new Common_pb.VectorF2D;
      reader.readMessage(value,Common_pb.VectorF2D.deserializeBinaryFromReader);
      msg.setDesignatedPosition(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlueTeamOnPositiveHalf(value);
      break;
    case 12:
      var value = /** @type {!proto.Referee.Command} */ (reader.readEnum());
      msg.setNextCommand(value);
      break;
    case 16:
      var value = new proto.GameEvent;
      reader.readMessage(value,proto.GameEvent.deserializeBinaryFromReader);
      msg.addGameEvents(value);
      break;
    case 17:
      var value = new proto.GameEventProposalGroup;
      reader.readMessage(value,proto.GameEventProposalGroup.deserializeBinaryFromReader);
      msg.addGameEventProposals(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentActionTimeRemaining(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Referee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Referee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Referee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Referee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.Referee.Stage} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = /** @type {!proto.Referee.Command} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getYellow();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Referee.TeamInfo.serializeBinaryToWriter
    );
  }
  f = message.getBlue();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Referee.TeamInfo.serializeBinaryToWriter
    );
  }
  f = message.getDesignatedPosition();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      Common_pb.VectorF2D.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {!proto.Referee.Command} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getGameEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.GameEvent.serializeBinaryToWriter
    );
  }
  f = message.getGameEventProposalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.GameEventProposalGroup.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt32(
      15,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Referee.Stage = {
  NORMAL_FIRST_HALF_PRE: 0,
  NORMAL_FIRST_HALF: 1,
  NORMAL_HALF_TIME: 2,
  NORMAL_SECOND_HALF_PRE: 3,
  NORMAL_SECOND_HALF: 4,
  EXTRA_TIME_BREAK: 5,
  EXTRA_FIRST_HALF_PRE: 6,
  EXTRA_FIRST_HALF: 7,
  EXTRA_HALF_TIME: 8,
  EXTRA_SECOND_HALF_PRE: 9,
  EXTRA_SECOND_HALF: 10,
  PENALTY_SHOOTOUT_BREAK: 11,
  PENALTY_SHOOTOUT: 12,
  POST_GAME: 13
};

/**
 * @enum {number}
 */
proto.Referee.Command = {
  HALT: 0,
  STOP: 1,
  NORMAL_START: 2,
  FORCE_START: 3,
  PREPARE_KICKOFF_YELLOW: 4,
  PREPARE_KICKOFF_BLUE: 5,
  PREPARE_PENALTY_YELLOW: 6,
  PREPARE_PENALTY_BLUE: 7,
  DIRECT_FREE_YELLOW: 8,
  DIRECT_FREE_BLUE: 9,
  INDIRECT_FREE_YELLOW: 10,
  INDIRECT_FREE_BLUE: 11,
  TIMEOUT_YELLOW: 12,
  TIMEOUT_BLUE: 13,
  GOAL_YELLOW: 14,
  GOAL_BLUE: 15,
  BALL_PLACEMENT_YELLOW: 16,
  BALL_PLACEMENT_BLUE: 17
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Referee.TeamInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Referee.TeamInfo.repeatedFields_, null);
};
goog.inherits(proto.Referee.TeamInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Referee.TeamInfo.displayName = 'proto.Referee.TeamInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Referee.TeamInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Referee.TeamInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Referee.TeamInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Referee.TeamInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Referee.TeamInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    score: jspb.Message.getField(msg, 2),
    redCards: jspb.Message.getField(msg, 3),
    yellowCardTimesList: jspb.Message.getRepeatedField(msg, 4),
    yellowCards: jspb.Message.getField(msg, 5),
    timeouts: jspb.Message.getField(msg, 6),
    timeoutTime: jspb.Message.getField(msg, 7),
    goalkeeper: jspb.Message.getField(msg, 8),
    foulCounter: jspb.Message.getField(msg, 9),
    ballPlacementFailures: jspb.Message.getField(msg, 10),
    canPlaceBall: jspb.Message.getField(msg, 12),
    maxAllowedBots: jspb.Message.getField(msg, 13),
    botSubstitutionIntent: jspb.Message.getField(msg, 14),
    ballPlacementFailuresReached: jspb.Message.getField(msg, 15)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Referee.TeamInfo}
 */
proto.Referee.TeamInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Referee.TeamInfo;
  return proto.Referee.TeamInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Referee.TeamInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Referee.TeamInfo}
 */
proto.Referee.TeamInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRedCards(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setYellowCardTimesList(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setYellowCards(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeouts(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeoutTime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGoalkeeper(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFoulCounter(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBallPlacementFailures(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanPlaceBall(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxAllowedBots(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBotSubstitutionIntent(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBallPlacementFailuresReached(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Referee.TeamInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Referee.TeamInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Referee.TeamInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Referee.TeamInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getYellowCardTimesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.Referee.TeamInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Referee.TeamInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Referee.TeamInfo.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 score = 2;
 * @return {number}
 */
proto.Referee.TeamInfo.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Referee.TeamInfo.prototype.setScore = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Referee.TeamInfo.prototype.clearScore = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasScore = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 red_cards = 3;
 * @return {number}
 */
proto.Referee.TeamInfo.prototype.getRedCards = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Referee.TeamInfo.prototype.setRedCards = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Referee.TeamInfo.prototype.clearRedCards = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasRedCards = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated uint32 yellow_card_times = 4;
 * @return {!Array<number>}
 */
proto.Referee.TeamInfo.prototype.getYellowCardTimesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<number>} value */
proto.Referee.TeamInfo.prototype.setYellowCardTimesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Referee.TeamInfo.prototype.addYellowCardTimes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.Referee.TeamInfo.prototype.clearYellowCardTimesList = function() {
  this.setYellowCardTimesList([]);
};


/**
 * required uint32 yellow_cards = 5;
 * @return {number}
 */
proto.Referee.TeamInfo.prototype.getYellowCards = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Referee.TeamInfo.prototype.setYellowCards = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Referee.TeamInfo.prototype.clearYellowCards = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasYellowCards = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 timeouts = 6;
 * @return {number}
 */
proto.Referee.TeamInfo.prototype.getTimeouts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Referee.TeamInfo.prototype.setTimeouts = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Referee.TeamInfo.prototype.clearTimeouts = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasTimeouts = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 timeout_time = 7;
 * @return {number}
 */
proto.Referee.TeamInfo.prototype.getTimeoutTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Referee.TeamInfo.prototype.setTimeoutTime = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.Referee.TeamInfo.prototype.clearTimeoutTime = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasTimeoutTime = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 goalkeeper = 8;
 * @return {number}
 */
proto.Referee.TeamInfo.prototype.getGoalkeeper = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Referee.TeamInfo.prototype.setGoalkeeper = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.Referee.TeamInfo.prototype.clearGoalkeeper = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasGoalkeeper = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 foul_counter = 9;
 * @return {number}
 */
proto.Referee.TeamInfo.prototype.getFoulCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Referee.TeamInfo.prototype.setFoulCounter = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.Referee.TeamInfo.prototype.clearFoulCounter = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasFoulCounter = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 ball_placement_failures = 10;
 * @return {number}
 */
proto.Referee.TeamInfo.prototype.getBallPlacementFailures = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.Referee.TeamInfo.prototype.setBallPlacementFailures = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.Referee.TeamInfo.prototype.clearBallPlacementFailures = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasBallPlacementFailures = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool can_place_ball = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Referee.TeamInfo.prototype.getCanPlaceBall = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.Referee.TeamInfo.prototype.setCanPlaceBall = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.Referee.TeamInfo.prototype.clearCanPlaceBall = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasCanPlaceBall = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 max_allowed_bots = 13;
 * @return {number}
 */
proto.Referee.TeamInfo.prototype.getMaxAllowedBots = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.Referee.TeamInfo.prototype.setMaxAllowedBots = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.Referee.TeamInfo.prototype.clearMaxAllowedBots = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasMaxAllowedBots = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool bot_substitution_intent = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Referee.TeamInfo.prototype.getBotSubstitutionIntent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.Referee.TeamInfo.prototype.setBotSubstitutionIntent = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.Referee.TeamInfo.prototype.clearBotSubstitutionIntent = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasBotSubstitutionIntent = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool ball_placement_failures_reached = 15;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Referee.TeamInfo.prototype.getBallPlacementFailuresReached = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 15, false));
};


/** @param {boolean} value */
proto.Referee.TeamInfo.prototype.setBallPlacementFailuresReached = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.Referee.TeamInfo.prototype.clearBallPlacementFailuresReached = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.TeamInfo.prototype.hasBallPlacementFailuresReached = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * required uint64 packet_timestamp = 1;
 * @return {number}
 */
proto.Referee.prototype.getPacketTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Referee.prototype.setPacketTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Referee.prototype.clearPacketTimestamp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.prototype.hasPacketTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Stage stage = 2;
 * @return {!proto.Referee.Stage}
 */
proto.Referee.prototype.getStage = function() {
  return /** @type {!proto.Referee.Stage} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Referee.Stage} value */
proto.Referee.prototype.setStage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Referee.prototype.clearStage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.prototype.hasStage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 stage_time_left = 3;
 * @return {number}
 */
proto.Referee.prototype.getStageTimeLeft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Referee.prototype.setStageTimeLeft = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Referee.prototype.clearStageTimeLeft = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.prototype.hasStageTimeLeft = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required Command command = 4;
 * @return {!proto.Referee.Command}
 */
proto.Referee.prototype.getCommand = function() {
  return /** @type {!proto.Referee.Command} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.Referee.Command} value */
proto.Referee.prototype.setCommand = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Referee.prototype.clearCommand = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 command_counter = 5;
 * @return {number}
 */
proto.Referee.prototype.getCommandCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Referee.prototype.setCommandCounter = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Referee.prototype.clearCommandCounter = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.prototype.hasCommandCounter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint64 command_timestamp = 6;
 * @return {number}
 */
proto.Referee.prototype.getCommandTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Referee.prototype.setCommandTimestamp = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Referee.prototype.clearCommandTimestamp = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.prototype.hasCommandTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required TeamInfo yellow = 7;
 * @return {!proto.Referee.TeamInfo}
 */
proto.Referee.prototype.getYellow = function() {
  return /** @type{!proto.Referee.TeamInfo} */ (
    jspb.Message.getWrapperField(this, proto.Referee.TeamInfo, 7, 1));
};


/** @param {!proto.Referee.TeamInfo} value */
proto.Referee.prototype.setYellow = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.Referee.prototype.clearYellow = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.prototype.hasYellow = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required TeamInfo blue = 8;
 * @return {!proto.Referee.TeamInfo}
 */
proto.Referee.prototype.getBlue = function() {
  return /** @type{!proto.Referee.TeamInfo} */ (
    jspb.Message.getWrapperField(this, proto.Referee.TeamInfo, 8, 1));
};


/** @param {!proto.Referee.TeamInfo} value */
proto.Referee.prototype.setBlue = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.Referee.prototype.clearBlue = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.prototype.hasBlue = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional VectorF2D designated_position = 9;
 * @return {?proto.VectorF2D}
 */
proto.Referee.prototype.getDesignatedPosition = function() {
  return /** @type{?proto.VectorF2D} */ (
    jspb.Message.getWrapperField(this, Common_pb.VectorF2D, 9));
};


/** @param {?proto.VectorF2D|undefined} value */
proto.Referee.prototype.setDesignatedPosition = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.Referee.prototype.clearDesignatedPosition = function() {
  this.setDesignatedPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.prototype.hasDesignatedPosition = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool blue_team_on_positive_half = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Referee.prototype.getBlueTeamOnPositiveHalf = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.Referee.prototype.setBlueTeamOnPositiveHalf = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.Referee.prototype.clearBlueTeamOnPositiveHalf = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.prototype.hasBlueTeamOnPositiveHalf = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Command next_command = 12;
 * @return {!proto.Referee.Command}
 */
proto.Referee.prototype.getNextCommand = function() {
  return /** @type {!proto.Referee.Command} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.Referee.Command} value */
proto.Referee.prototype.setNextCommand = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.Referee.prototype.clearNextCommand = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.prototype.hasNextCommand = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated GameEvent game_events = 16;
 * @return {!Array<!proto.GameEvent>}
 */
proto.Referee.prototype.getGameEventsList = function() {
  return /** @type{!Array<!proto.GameEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GameEvent, 16));
};


/** @param {!Array<!proto.GameEvent>} value */
proto.Referee.prototype.setGameEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.GameEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GameEvent}
 */
proto.Referee.prototype.addGameEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.GameEvent, opt_index);
};


proto.Referee.prototype.clearGameEventsList = function() {
  this.setGameEventsList([]);
};


/**
 * repeated GameEventProposalGroup game_event_proposals = 17;
 * @return {!Array<!proto.GameEventProposalGroup>}
 */
proto.Referee.prototype.getGameEventProposalsList = function() {
  return /** @type{!Array<!proto.GameEventProposalGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GameEventProposalGroup, 17));
};


/** @param {!Array<!proto.GameEventProposalGroup>} value */
proto.Referee.prototype.setGameEventProposalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.GameEventProposalGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GameEventProposalGroup}
 */
proto.Referee.prototype.addGameEventProposals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.GameEventProposalGroup, opt_index);
};


proto.Referee.prototype.clearGameEventProposalsList = function() {
  this.setGameEventProposalsList([]);
};


/**
 * optional int32 current_action_time_remaining = 15;
 * @return {number}
 */
proto.Referee.prototype.getCurrentActionTimeRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.Referee.prototype.setCurrentActionTimeRemaining = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.Referee.prototype.clearCurrentActionTimeRemaining = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Referee.prototype.hasCurrentActionTimeRemaining = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameEventProposalGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GameEventProposalGroup.repeatedFields_, null);
};
goog.inherits(proto.GameEventProposalGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameEventProposalGroup.displayName = 'proto.GameEventProposalGroup';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GameEventProposalGroup.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameEventProposalGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.GameEventProposalGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameEventProposalGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEventProposalGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameEventList: jspb.Message.toObjectList(msg.getGameEventList(),
    proto.GameEvent.toObject, includeInstance),
    accepted: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameEventProposalGroup}
 */
proto.GameEventProposalGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameEventProposalGroup;
  return proto.GameEventProposalGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameEventProposalGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameEventProposalGroup}
 */
proto.GameEventProposalGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GameEvent;
      reader.readMessage(value,proto.GameEvent.deserializeBinaryFromReader);
      msg.addGameEvent(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccepted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameEventProposalGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameEventProposalGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameEventProposalGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameEventProposalGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameEventList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GameEvent.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated GameEvent game_event = 1;
 * @return {!Array<!proto.GameEvent>}
 */
proto.GameEventProposalGroup.prototype.getGameEventList = function() {
  return /** @type{!Array<!proto.GameEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GameEvent, 1));
};


/** @param {!Array<!proto.GameEvent>} value */
proto.GameEventProposalGroup.prototype.setGameEventList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GameEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GameEvent}
 */
proto.GameEventProposalGroup.prototype.addGameEvent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GameEvent, opt_index);
};


proto.GameEventProposalGroup.prototype.clearGameEventList = function() {
  this.setGameEventList([]);
};


/**
 * optional bool accepted = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GameEventProposalGroup.prototype.getAccepted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.GameEventProposalGroup.prototype.setAccepted = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.GameEventProposalGroup.prototype.clearAccepted = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameEventProposalGroup.prototype.hasAccepted = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.Team = {
  UNKNOWN: 0,
  YELLOW: 1,
  BLUE: 2
};

/**
 * @enum {number}
 */
proto.Division = {
  DIV_UNKNOWN: 0,
  DIV_A: 1,
  DIV_B: 2
};

goog.object.extend(exports, proto);
